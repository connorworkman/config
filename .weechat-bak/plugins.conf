#
# weechat -- plugins.conf
#

[var]
fifo.fifo = "on"
guile.check_license = "off"
lua.check_license = "off"
lua.pastebuf.color_line = "default,default"
lua.pastebuf.color_line_number = "default,darkgray"
lua.pastebuf.fetch_timeout = "30000"
lua.pastebuf.highlighter_timeout = "3000"
lua.pastebuf.open_unsupported_url = "0"
lua.pastebuf.shell = "/usr/bin/zsh"
lua.pastebuf.show_line_number = "1"
lua.pastebuf.sticky_notes_retardness_level = "1"
lua.pastebuf.syntax_highlighter = ""
lua.urlselect.buffer_name = "normal"
lua.urlselect.buffer_name_color = "green"
lua.urlselect.buffer_number_color = "brown"
lua.urlselect.cmd.i = "/input insert ${url}\x20"
lua.urlselect.cmd.o = "/exec -bg -nosh xdg-open ${url}"
lua.urlselect.help_color = "default"
lua.urlselect.highlight_color = "yellow,magenta"
lua.urlselect.index_color = "brown"
lua.urlselect.key_color = "cyan"
lua.urlselect.label.i = "insert into input bar"
lua.urlselect.label.o = "xdg-open"
lua.urlselect.message_color = "default"
lua.urlselect.nick_color = ""
lua.urlselect.scan_merged_buffers = "0"
lua.urlselect.search_prompt_color = "default"
lua.urlselect.search_scope = "url"
lua.urlselect.search_scope_color = "green"
lua.urlselect.status_color = "black,green"
lua.urlselect.status_timeout = "1300"
lua.urlselect.tags = "notify_message,notify_private,notify_highlight"
lua.urlselect.time_color = "default"
lua.urlselect.time_format = "%H:%M:%S"
lua.urlselect.title_color = "default"
lua.urlselect.url_color = "_lightblue"
lua.urlselect.use_simple_matching = "0"
perl.amarok2.color_album = "white"
perl.amarok2.color_artist = "white"
perl.amarok2.color_title = "white"
perl.amarok2.ssh_host = "localhost"
perl.amarok2.ssh_port = "22"
perl.amarok2.ssh_status = "disabled"
perl.amarok2.ssh_user = "user"
perl.amarok2.text_output = "listening to: ♬  %T from %C by %A [%Z of %M @ %S kbps] ♬"
perl.check_license = "off"
perl.colorize_lines.blacklist_buffers = ""
perl.colorize_lines.buffers = "all"
perl.colorize_lines.highlight = "on"
perl.colorize_lines.ignore_tags = "irc_ctcp"
perl.colorize_lines.lines = "on"
perl.colorize_lines.nicks = ""
perl.colorize_lines.own_lines = "on"
perl.colorize_lines.tags = "irc_privmsg"
perl.coords.color.selection = "reverse.brown,black"
perl.coords.color.selection_cursor = "reverse.underline"
perl.coords.color.url_highlight = "reverse.underline"
perl.coords.color.url_highlight_active = "reverse.brown,black"
perl.coords.copybuf_short_name = "©"
perl.coords.hyper_channels = "off"
perl.coords.hyper_nicks = "off"
perl.coords.hyper_prefix = "on"
perl.coords.hyper_show = "url"
perl.coords.mouse.click_select_pane = "on"
perl.coords.mouse.click_through_pane = "off"
perl.coords.mouse.close_on_release = "110"
perl.coords.mouse.copy_on_click = "on"
perl.coords.mouse.handle_scroll = "off"
perl.coords.mouse.scroll_inactive_pane = "on"
perl.coords.mouse.url_open_2nd_click = "off"
perl.coords.url_braces = "[({<"''">})]"
perl.coords.url_non_beginnings = "\W"
perl.coords.url_non_endings = "[.,;:?!_-]"
perl.coords.url_regex = "\w+://\S+ | (?:^|(?<=\s))(?:\S+\.){2,}\w{2,5}(?:/\S*|(?=\s)|$) | (?:^|(?<=\s))(?:\S+\.)+\w{2,5}/(?:\S+)?"
perl.coords.use_nick_menu = "off"
perl.coords.xterm_compatible = "rxvt-uni"
perl.highmon.alignment = "channel"
perl.highmon.away_only = "off"
perl.highmon.color_buf = "on"
perl.highmon.first_run = "true"
perl.highmon.hotlist_show = "off"
perl.highmon.logging = "off"
perl.highmon.merge_private = "off"
perl.highmon.nick_prefix = "<"
perl.highmon.nick_suffix = ">"
perl.highmon.output = "buffer"
perl.highmon.short_names = "off"
perl.rhythmbus.album = "_"
perl.rhythmbus.artist = ""
perl.rhythmbus.bitrate = ""
perl.rhythmbus.format = "Now Playing: "%Ti" off %Al by %Ar"
perl.rhythmbus.length = ""
perl.rhythmbus.title = ""
perl.rhythmbus.tracknumber = ""
perl.spell_menu.complete_near = "on"
perl.spell_menu.complete_noend = "off"
perl.spell_menu.no_complete = "off"
perl.stats_bar.stats_interface = "eth1"
perl.stats_bar.stats_refresh = "10"
perl.url_arza.min_length = "100"
perl.url_arza.url = "http://arza.us/s/?password=&url="
perl.url_arza.url_append_command = "&id_min_length=1"
perl.url_arza.url_append_incoming = "&id_min_length=2"
perl.volumeter.device_name = "eth0"
perl.volumeter.display_char = "MiB"
perl.volumeter.refresh_rate = "5000"
python.apply_corrections.check_every = "5"
python.apply_corrections.data_timeout = "60"
python.apply_corrections.message_limit = "2"
python.apply_corrections.print_format = "[nick]: [corrected]"
python.apply_corrections.print_limit = "1"
python.autojoin.autosave = "off"
python.autojoin_on_invite.autojoin_key = "on"
python.autojoin_on_invite.ignore_channels = ""
python.autojoin_on_invite.ignore_nicks = ""
python.autojoin_on_invite.whitelist_channels = ""
python.autojoin_on_invite.whitelist_nicks = ""
python.autojoinem.sorted = "off"
python.autosavekey.add = "off"
python.autosavekey.mute = "off"
python.autosavekey.secure = "off"
python.bandwidth.device = "eth0"
python.bandwidth.format = "%N(↓%DV%DU/s ↑%UV%UU/s)"
python.bandwidth.refresh_rate = "5"
python.bandwidth.separator = " "
python.buffer_autoclose.age_limit = "30"
python.buffer_autoclose.ignore = ""
python.buffer_autoclose.interval = "1"
python.check_license = "off"
python.cmd_help.color_alias = "white"
python.cmd_help.color_alias_name = "green"
python.cmd_help.color_alias_value = "green"
python.cmd_help.color_arguments = "cyan"
python.cmd_help.color_delimiters = "lightgreen"
python.cmd_help.color_list = "green"
python.cmd_help.color_list_count = "white"
python.cmd_help.color_no_help = "red"
python.cmd_help.color_option_help = "brown"
python.cmd_help.color_option_name = "yellow"
python.cmd_help.display_no_help = "on"
python.cmd_help.format_option = "(${white:type}) ${description_nls}"
python.cmd_help.ignore_commands = "map,me,die,restart"
python.cmd_help.max_options = "5"
python.cmd_help.prefix = "["
python.cmd_help.right_align = "off"
python.cmd_help.right_padding = "15"
python.cmd_help.space = "2"
python.cmd_help.start_on_load = "off"
python.cmd_help.stop_on_enter = "on"
python.cmd_help.suffix = "]"
python.cmd_help.timer = "0"
python.completion.replace_values = ""
python.correction_completion.lang = "en"
python.country.show_in_whois = "on"
python.country.show_localtime = "on"
python.country.time_format = "%x %X %Z"
python.go.auto_jump = "off"
python.go.color_name = "black,cyan"
python.go.color_name_highlight = "red,cyan"
python.go.color_name_highlight_selected = "red,brown"
python.go.color_name_selected = "black,brown"
python.go.color_number = "yellow,magenta"
python.go.color_number_selected = "yellow,red"
python.go.message = "Go to: "
python.go.short_name = "off"
python.go.sort = "number,beginning"
python.go.use_core_instead_weechat = "off"
python.grep.clear_buffer = "off"
python.grep.default_tail_head = "10"
python.grep.go_to_buffer = "on"
python.grep.log_filter = ""
python.grep.max_lines = "4000"
python.grep.show_summary = "on"
python.grep.size_limit = "2048"
python.gweather.city = ""
python.gweather.format = "%C: %D%U, %O"
python.gweather.interval = "10"
python.gweather.language = "en"
python.gweather.output_color = "white"
python.gweather.timeout = "10"
python.gweather.unit = "C"
python.histman.buffer_close = "off"
python.histman.history_dir = "%h/history"
python.histman.min_length = "2"
python.histman.number = "0"
python.histman.pattern = "(.*password|.*nickserv|/quit)"
python.histman.rmodifier = "off"
python.histman.save = "all"
python.histman.save_global = "off"
python.histman.skip_double = "on"
python.ichatts.minutes_until_timestamp = "5"
python.ichatts.remind_every = "15"
python.mpris2_np.default_player = ""
python.responsive_layout.debug = "off"
python.responsive_layout.default_nicklist = "on"
python.spell_correction.auto_pop_up_item = "off"
python.spell_correction.auto_replace = "on"
python.spell_correction.catch_input_completion = "on"
python.spell_correction.complete_near = "2"
python.spell_correction.eat_input_char = "on"
python.spell_correction.hide_single_dict = "on"
python.spell_correction.replace_mode = "on"
python.spell_correction.suggest_item = "${white}%S${default}"
python.spotify.buffers = "freenode.#mychan,"
python.spotify.emit_notice = "off"
python.title.short_name = "on"
python.title.title_priority = "2"
python.urlbar.ignore = "grep"
python.urlbar.remember_amount = "25"
python.urlbar.show_buffername = "on"
python.urlbar.show_index = "on"
python.urlbar.show_nick = "on"
python.urlbar.show_timestamp = "on"
python.urlbar.time_format = "%H:%M"
python.urlbar.use_popup = "on"
python.urlbar.visible_amount = "5"
python.urlbar.visible_seconds = "5"
python.urlbuf.display_active_buffer = "on"
python.urlbuf.display_buffer_number = "on"
python.urlbuf.display_nick = "off"
python.urlbuf.display_private = "on"
python.urlbuf.skip_buffers = ""
python.urlbuf.skip_duplicates = "on"
python.urlserver.buffer_short_name = "off"
python.urlserver.color = "darkgray"
python.urlserver.color_in_msg = ""
python.urlserver.debug = "off"
python.urlserver.display_urls = "on"
python.urlserver.display_urls_in_msg = "off"
python.urlserver.http_allowed_ips = ""
python.urlserver.http_auth = ""
python.urlserver.http_auth_redirect = "on"
python.urlserver.http_autostart = "on"
python.urlserver.http_bg_color = "#f4f4f4"
python.urlserver.http_css_url = ""
python.urlserver.http_embed_image = "off"
python.urlserver.http_embed_youtube = "off"
python.urlserver.http_embed_youtube_size = "480*350"
python.urlserver.http_fg_color = "#000"
python.urlserver.http_hostname = ""
python.urlserver.http_hostname_display = ""
python.urlserver.http_open_in_new_page = "on"
python.urlserver.http_port = ""
python.urlserver.http_port_display = ""
python.urlserver.http_prefix_suffix = " "
python.urlserver.http_scheme_display = "http"
python.urlserver.http_time_format = "%d/%m/%y %H:%M:%S"
python.urlserver.http_title = "WeeChat URLs"
python.urlserver.http_url_prefix = ""
python.urlserver.msg_ignore_buffers = "core.weechat,python.grep"
python.urlserver.msg_ignore_dup_urls = "off"
python.urlserver.msg_ignore_regex = ""
python.urlserver.msg_ignore_tags = "irc_quit,irc_part,notify_none"
python.urlserver.msg_require_tags = "nick_"
python.urlserver.separators = "[|]"
python.urlserver.url_min_length = "0"
python.urlserver.urls_amount = "100"
python.weather.city = ""
python.weather.interval = "10"
python.weather.language = "en"
python.weather.timeout = "10"
python.whois_on_query.command = "/whois $nick $nick"
python.whois_on_query.self_query = "off"
ruby.check_license = "off"
ruby.colorizer.buffer_regex = ""
ruby.colorizer.rule.0 = ""
ruby.colorizer.rule.1 = ""
ruby.colorizer.rule.2 = ""
ruby.colorizer.rule.3 = ""
ruby.colorizer.rule.4 = ""
ruby.colorizer.rule.count = "10"
ruby.substitution.general_rule = ""
tcl.check_license = "off"
weenick.server_default.nickserv_failed = "access denied"
weenick.server_default.nickserv_ghost_killed = "ghost with your nick has been killed"
weenick.server_default.nickserv_identified = "password accepted"
weenick.server_default.nickserv_nick = "NickServ"
weenick.server_default.nickserv_registered = "nickname is registered"

[desc]
      Example: "_red" = "underlined red text""
    %Al = "Album, %Ar = Artist, %Ti = Title, %Tr = Track Number, %L = Length, %B = Bitrate"
    default: "Now Playing: "%Ti" from %Al by %Ar"" = ""
   exceptions: lightred = "red, grey = gray (for Bold text use "*", for Underline text use "_")"
lua.pastebuf.color_line = "Color for line content"
lua.pastebuf.color_line_number = "Color for line number"
lua.pastebuf.fetch_timeout = "Timeout for fetching URL (in milliseconds)"
lua.pastebuf.highlighter_timeout = "Timeout for syntax highlighter (in milliseconds)"
lua.pastebuf.open_unsupported_url = "Force open raw text of unsupported URL format"
lua.pastebuf.shell = "Location of your shell or just the shell name if it's already in $PATH"
lua.pastebuf.show_line_number = "Show line number"
lua.pastebuf.sticky_notes_retardness_level = "The retardness level of Sticky Notes API. Use level 0 if they somehow fixed their JSON string. Use level 1 to fix their awful JSON string first before decoding it. Use level 2 if level 1 failed fixing their JSON string. In level 2, we'll abandon their API and just fetch the raw paste. Default is 1."
lua.pastebuf.syntax_highlighter = "External command that will be used as syntax highlighter. $lang will be replaced by the name of syntax language"
lua.urlselect.buffer_name = "Type of name to use inside urlselect_buffer_name item. Valid values are "full", "normal", and "short""
lua.urlselect.buffer_name_color = "Color for buffer name"
lua.urlselect.buffer_number_color = "Color for buffer number"
lua.urlselect.help_color = "Color for help text"
lua.urlselect.highlight_color = "Nickname color for highlighted message"
lua.urlselect.index_color = "Color for URL index"
lua.urlselect.key_color = "Color for list of keys"
lua.urlselect.message_color = "Color for message text"
lua.urlselect.nick_color = "Color for nickname. Leave empty to use Weechat's nick color"
lua.urlselect.scan_merged_buffers = "Scan URLs from buffers that are merged with the current one"
lua.urlselect.search_prompt_color = "Color for search prompt"
lua.urlselect.search_scope = "Default search scope. Valid values are: url, msg, nick or nick+msg"
lua.urlselect.search_scope_color = "Color for current search scope"
lua.urlselect.status_color = "Color for status notification"
lua.urlselect.status_timeout = "Timeout for displaying status notification (in milliseconds)"
lua.urlselect.tags = "Comma separated list of tags. If not empty, script will only scan URLs from messages with any of these tags"
lua.urlselect.time_color = "Color for time"
lua.urlselect.time_format = "Format of time"
lua.urlselect.title_color = "Color for bar title"
lua.urlselect.url_color = "Color for URL"
lua.urlselect.use_simple_matching = "Use simple pattern matching when scanning for URLs"
perl.colorize_lines.blacklist_buffers = "Comma-separated list of channels to be ignored (e.g. freenode.#weechat,*.#python)"
perl.colorize_lines.buffers = "Buffer type affected by the script (all/channel/query, default: all)"
perl.colorize_lines.highlight = "Apply highlight color to the highlighted lines (off/on/nicks). The latter will limit highlighting to nicknames in option 'nicks'"
perl.colorize_lines.ignore_tags = "Comma-separated list of tags to ignore (see /debug tags)"
perl.colorize_lines.lines = "Apply nickname color to the lines (off/on/nicks). The latter will limit highlighting to nicknames in option 'nicks'"
perl.colorize_lines.nicks = "Comma-separater list of nicks (e.g. freenode.cat,*.dog) OR file name starting with '/' (e.g. /file.txt). In the latter case, nicknames will get loaded from that file inside weechat folder (e.g. from ~/.weechat/file.txt). Nicknames in file are newline-separated (e.g. freenode.dog\n*.cat)"
perl.colorize_lines.own_lines = "Apply nickname color to own lines (off/on/only). The latter turns off all other kinds of coloring altogether"
perl.colorize_lines.tags = "Comma-separated list of tags to accept (see /debug tags)"
perl.coords.clipboard_command = "if you set this, an external program may be executed to store the selection or URL. begin with | to pipe into program or use parameters %s for text, %q for quoted text or %x for quoted escape sequence."
perl.coords.color.selection = "the color of the currently selected text in selection mode"
perl.coords.color.selection_cursor = "the weechat color and/or attribute to be used for the text cursor."
perl.coords.color.url_highlight = "the weechat color and/or attribute to be used for highlighting URLs in the copy window. seperate multiple attributes with ."
perl.coords.color.url_highlight_active = "the same as color.url_highlight except for the currently (using arrow keys) selected link."
perl.coords.copybuf_short_name = "short_name to use for coords buffer. it is set to the copy sign by default to not disturb buffers bar width, set to the empty string to have window position and size shown"
perl.coords.copywin_custom_keys = "You can define custom key bindings to use inside the copywin here. syntax is: command-letter:weechat-keycode. available commands: -+>< (up/down/left/right) fbae (forward word/backward word/beginning/end) !@ (open/start selection) /UNCunc (toggle highlights/urls/nicks/channels) q (close window)"
perl.coords.hyper_channels = "make channels to hyperlinks for join"
perl.coords.hyper_nicks = "make nicks to hyperlinks for menu/pm"
perl.coords.hyper_show = "set to types of hyperlinks that are shown by default"
perl.coords.mouse.click_select_pane = "set to on to use the mouse to select windows"
perl.coords.mouse.click_through_pane = "set to on if copy_on_click should work on inactive windows (works only if click_select_pane is set too). set to off if window needs to be active"
perl.coords.mouse.close_on_release = "set to on or a delay (in ms) to autoclose coords buffer opened by copy_on_click on button release, set to off if the coords buffer should stay open after click"
perl.coords.mouse.copy_on_click = "set to on if it should be possible to directly click on URLs and select text, set to off if mouse should only work in open coords buffer"
perl.coords.mouse.handle_scroll = "set to on if coords should handle scrolling inside windows. the script will try to guess non-chat areas to be nicklist, top to be title and bottom to be status and scroll the respective bars if the cursor is in that area. set to off if scrolling should be handled by the default mouse.pl script or another mouse scrolling script"
perl.coords.mouse.scroll_inactive_pane = "set to on if inactive windows should be scrolled instead of active window if the mouse cursor is over it (requires handle_scroll to be enabled)"
perl.coords.mouse.url_open_2nd_click = "if this is set, URLs are only opened when clicked twice (in the same incarnation of a coords buffer) instead of on first click. it can be set to a delay (in ms) that will be added to the close_on_release delay if the script is waiting for a second click on the URL to happen"
perl.coords.url_braces = "parenthesis-like characters which nest and should be excluded when found around an URL. make sure the variable setting nests properly when modifying this."
perl.coords.url_non_endings = "this is matched against the end of a link and removed"
perl.coords.url_regex = "a regular expression to identify URLs in the text. See perlre for more information about Perl regular expressions."
perl.coords.use_nick_menu = "use nick menu when opening nick hyperlink (see hyper_nicks, requires menu.pl script). otherwise open private message. this setting only applies to text mode selection, for mouse see mouse.nick_2nd_click"
perl.menu.active_help = "this setting is documented for completeness, it reflects if the help bar is visible and can be toggled from within the menu with Ctrl+H."
perl.menu.key_binding_hidden = "if set to on, the friendly reminder how to open the main menu (by default: /menu to open menu) will be removed from view. useful for those people bothered by it."
perl.menu.main_menu_hidden = "if set to on, the main menu bar will be always hidden. useful if you don't care about clicking on the main menu and want to save one line on your screen (due to internal reasons, the setting weechat.bar.main_menu.hidden does not work reliably, use this instead.)"
perl.menu.sticky_menu = "if this is set to on, a submenu is not closed when the entry is confirmed but has to be closed manually using Ctrl+X."
perl.rhythmbus.album = ""Can be any IRC color name listed here: http://www.mirc.net/newbie/colors.php"
perl.rhythmbus.artist = ""Can be any IRC color name listed here: http://www.mirc.net/newbie/colors.php"
perl.rhythmbus.bitrate = ""Can be any IRC color name listed here: http://www.mirc.net/newbie/colors.php"
perl.rhythmbus.format = ""Set the format of the text to send to current channel"
perl.rhythmbus.length = ""Can be any IRC color name listed here: http://www.mirc.net/newbie/colors.php"
perl.rhythmbus.title = ""Can be any IRC color name listed here: http://www.mirc.net/newbie/colors.php"
perl.rhythmbus.tracknumber = ""Can be any IRC color name listed here: http://www.mirc.net/newbie/colors.php"
perl.spell_menu.complete_near = "only use tab complete to open the menu if the cursor is next to the wrong word"
perl.spell_menu.complete_noend = "don't spell correct with tab if exactly at the end of a word"
perl.spell_menu.no_complete = "don't open the spell menu on tab completion. make a binding yourself to call /spell_menu, for example"
perl.url_arza.min_length = "minimum length for incoming urls to shorten, after http:// (default: 100)"
perl.url_arza.url = "url for shortener, url to shorten is appended, the shortener should return the short url (default: http://arza.us/s/?password=&url=)"
perl.url_arza.url_append_command = "string to append to the url when shortening in input line (default: &id_min_length=1)"
perl.url_arza.url_append_incoming = "string to append to the url when shortening incoming urls (default: &id_min_length=2)"
python.apply_corrections.check_every = "Interval between each check for expired messages."
python.apply_corrections.data_timeout = "Time before a message is expired."
python.apply_corrections.message_limit = "Number of messages to store per nick."
python.apply_corrections.print_format = "Format string for the printed corrections."
python.apply_corrections.print_limit = "Maximum number of lines to correct."
python.autojoinem.sorted = "channels will be sorted in autojoin option. if options contains channel-keys, this option will be ignored. (default: "off")"
python.autosavekey.add = "adds channel and key to autojoin list on /join, if channel/key does not already exists (default: "off")"
python.autosavekey.mute = "execute command silently, only error messages will be displayed. (default: "off")"
python.autosavekey.secure = "change channel key in secure data. (default: "off")"
python.bandwidth.device = "Network interface(s) to monitor, in order, separated by ';'"
python.bandwidth.format = "Output formatting: %N = network interface, %DV = downstream value, %DU = downstream units (K or M), %UV = upstream value, %UU = upstream units (K or M).  Note: default setting uses UTF-8"
python.bandwidth.refresh_rate = "Refresh rate in seconds"
python.bandwidth.separator = "String displayed between output for multiple devices"
python.cmd_help.color_alias = "color for text "Alias" (default: "white")"
python.cmd_help.color_alias_name = "color for alias name (default: "green")"
python.cmd_help.color_alias_value = "color for alias value (default: "green")"
python.cmd_help.color_arguments = "color for command arguments (default: "cyan")"
python.cmd_help.color_delimiters = "color for delimiters (default: "lightgreen")"
python.cmd_help.color_list = "color for list of commands/options (default: "green")"
python.cmd_help.color_list_count = "color for number of commands/options in list found (default: "white")"
python.cmd_help.color_no_help = "color for text "No help" (default: "red")"
python.cmd_help.color_option_help = "color for help on option (default: "brown")"
python.cmd_help.color_option_name = "color for name of option found (by adding "*" to option name) (default: "yellow")"
python.cmd_help.display_no_help = "display "No help" when command is not found (default: "on")"
python.cmd_help.format_option = "format of help for options: free text with identifiers using format: ${name} or ${color:name}: color is a WeeChat color (optional), name is a field of infolist "option": full_name, config_name, section_name, option_name, parent_name, description, description_nls, string_values, min, max, null_value_allowed, value_is_null, default_value_is_null, type, value, default_value (default: "(${white:type}) ${description_nls}")"
python.cmd_help.ignore_commands = "comma-separated list of commands (without leading "/") to ignore (default: "map,me,die,restart")"
python.cmd_help.max_options = "max number of options displayed in list (default: "5")"
python.cmd_help.prefix = "string displayed before help (default: "[")"
python.cmd_help.right_align = "align help to right (default: "off")"
python.cmd_help.right_padding = "padding to right when aligned to right (default: "15")"
python.cmd_help.space = "minimum space before help (default: "2")"
python.cmd_help.start_on_load = "auto start help when script is loaded (default: "off")"
python.cmd_help.stop_on_enter = "enter key stop help (default: "on")"
python.cmd_help.suffix = "string displayed after help (default: "]")"
python.cmd_help.timer = "number of seconds help is displayed (0 = display until help is toggled) (default: "0")"
python.go.auto_jump = "automatically jump to buffer when it is uniquely selected (default: "off")"
python.go.color_name = "color for buffer name (not selected) (default: "black,cyan")"
python.go.color_name_highlight = "color for highlight in buffer name (not selected) (default: "red,cyan")"
python.go.color_name_highlight_selected = "color for highlight in a selected buffer name (default: "red,brown")"
python.go.color_name_selected = "color for a selected buffer name (default: "black,brown")"
python.go.color_number = "color for buffer number (not selected) (default: "yellow,magenta")"
python.go.color_number_selected = "color for selected buffer number (default: "yellow,red")"
python.go.message = "message to display before list of buffers (default: "Go to: ")"
python.go.short_name = "display and search in short names instead of buffer name (default: "off")"
python.go.sort = "comma-separated list of keys to sort buffers (the order is important, sorts are performed in the given order): name = sort by name (or short name),  (default: "number,beginning")"
python.go.use_core_instead_weechat = "use name "core" instead of "weechat" for core buffer (default: "off")"
python.histman.buffer_close = "save command history, when buffer will be closed (default: off) (default: "off")"
python.histman.history_dir = "locale cache directory for history files ("%h" will be replaced by WeeChat home, "~/.weechat" by default) (default: "%h/history")"
python.histman.min_length = "minimum length of command/text (default: 2) (default: "2")"
python.histman.number = "number of history commands/text to save. A positive number will save from oldest to latest, a negative number will save from latest to oldest. 0 = save whole history (e.g. -10 will save the last 10 history entries (default: "0")"
python.histman.pattern = "a simple regex to ignore commands/text. Empty value disable pattern matching (default: "(.*password|.*nickserv|/quit)")"
python.histman.rmodifier = "use rmodifier options to ignore commands/text (default:off) (default: "off")"
python.histman.save = "define what should be save from history. Possible values are "command", "text", "all". This is a fallback option (see /help histman) (default: "all")"
python.histman.save_global = "save global history, possible values are "command", "text", "all" or "off"(default: off) (default: "off")"
python.histman.skip_double = "skip lines that already exists (case sensitive) (default: "on")"
python.mpris2_np.default_player = "Player name to use for "/np" (default: "", shows a list)"
python.responsive_layout.debug = "Script debug output (default: off)"
python.responsive_layout.default_nicklist = "Global setting to always show nicklist when layout switches. (default: on)"
python.spell_correction.auto_pop_up_item = "automatic pop-up suggestion item on a misspelled word (default: "off")"
python.spell_correction.auto_replace = "replaces misspelled word with selected suggestion, automatically. If you use "off" you will have to bind command "/spell_correction replace" to a key (default: "on")"
python.spell_correction.catch_input_completion = "will catch the input_complete commands [TAB-key] (default: "on")"
python.spell_correction.complete_near = "show suggestions item only if you are n-chars near the misspelled word (0 = off). Using 'replace_mode' cursor has to be n-chars near misspelled word to cycle through suggestions. (default: "0")"
python.spell_correction.eat_input_char = "will eat the next char you type, after replacing a misspelled word (default: "on")"
python.spell_correction.hide_single_dict = "will hide dict in item if you have a single dict for buffer only (default: "on")"
python.spell_correction.replace_mode = "misspelled word will be replaced directly by suggestions. Use option 'complete_near' to specify range and item 'spell_suggest' to show possible suggestions. (default: "off")"
python.spell_correction.suggest_item = "item format (%S = suggestion, %D = dict). Colors are allowed with format "${color}". note: since WeeChat 0.4.2 content is evaluated, see /help eval. (default: "${white}%S${default}")"
python.spotify.buffers = "A comma separated list of buffers the script should check"
python.spotify.emit_notice = "If on, this script will use /notice, if off, it will use /msg to post info"
python.urlbuf.display_active_buffer = "display URLs from the active buffer"
python.urlbuf.display_buffer_number = "display the buffer's number"
python.urlbuf.display_nick = "display the nick of the user"
python.urlbuf.display_private = "display URLs from private messages"
python.urlbuf.skip_buffers = "a comma separated list of buffer numbers to skip"
python.urlbuf.skip_duplicates = "skip the URL that is already in the urlbuf"
python.urlserver.buffer_short_name = "use buffer short name on dedicated buffer (default: "off")"
python.urlserver.color = "color for urls displayed after message (default: "darkgray")"
python.urlserver.color_in_msg = "color for urls displayed inside irc message: it is a number (irc color) between 00 and 15 (see doc for a list of irc colors) (default: "")"
python.urlserver.debug = "print some debug messages (default: "off")"
python.urlserver.display_urls = "display URLs below messages (default: "on")"
python.urlserver.display_urls_in_msg = "add shorten url next to the original url (only in IRC messages) (useful for urlserver behind relay/irc) (default: "off")"
python.urlserver.http_allowed_ips = "regex for IPs allowed to use server (example: "^(123.45.67.89|192.160.*)$") (default: "")"
python.urlserver.http_auth = "login and password (format: "login:password") required to access to page with list of URLs (note: content is evaluated, see /help eval) (default: "")"
python.urlserver.http_auth_redirect = "require the login/password (if option "http_auth" is set) for URLs redirections (default: "on")"
python.urlserver.http_autostart = "start the built-in HTTP server automatically) (default: "on")"
python.urlserver.http_bg_color = "background color for HTML page (default: "#f4f4f4")"
python.urlserver.http_css_url = "URL of external Cascading Style Sheet to add (BE CAREFUL: the HTTP referer will be sent to site hosting CSS file!) (empty value = use default embedded CSS) (default: "")"
python.urlserver.http_embed_image = "embed images in HTML page (BE CAREFUL: the HTTP referer will be sent to site hosting image!) (default: "off")"
python.urlserver.http_embed_youtube = "embed youtube videos in HTML page (BE CAREFUL: the HTTP referer will be sent to youtube!) (default: "off")"
python.urlserver.http_embed_youtube_size = "size for embedded youtube video, format is "xxx*yyy" (default: "480*350")"
python.urlserver.http_fg_color = "foreground color for HTML page (default: "#000")"
python.urlserver.http_hostname = "force hostname/IP in bind of socket (empty value = auto-detect current hostname) (default: "")"
python.urlserver.http_hostname_display = "display this hostname in shortened URLs (default: "")"
python.urlserver.http_open_in_new_page = "open links in new pages/tabs (default: "on")"
python.urlserver.http_port = "force port for listening (empty value = find a random free port) (default: "")"
python.urlserver.http_port_display = "display this port in shortened URLs. Useful if you forward a different external port to the internal port (default: "")"
python.urlserver.http_prefix_suffix = "suffix displayed between prefix and message in HTML page (default: " ")"
python.urlserver.http_scheme_display = "display this scheme in shortened URLs (default: "http")"
python.urlserver.http_time_format = "time format in the HTML page (default: "%d/%m/%y %H:%M:%S")"
python.urlserver.http_title = "title of the HTML page (default: "WeeChat URLs")"
python.urlserver.http_url_prefix = "prefix to add in URLs to prevent external people to scan your URLs (for example: prefix "xx" will give URL: http://host.com:1234/xx/8) (default: "")"
python.urlserver.msg_ignore_buffers = "comma-separated list (without spaces) of buffers to ignore (full name like "irc.freenode.#weechat") (default: "core.weechat,python.grep")"
python.urlserver.msg_ignore_dup_urls = "ignore duplicated URLs (do not add an URL in list if it is already) (default: "off")"
python.urlserver.msg_ignore_regex = "ignore messages matching this regex (default: "")"
python.urlserver.msg_ignore_tags = "comma-separated list (without spaces) of tags (or beginning of tags) to ignore (for example, use "notify_none" to ignore self messages or "nick_weebot" to ignore messages from nick "weebot") (default: "irc_quit,irc_part,notify_none")"
python.urlserver.msg_require_tags = "comma-separated list (without spaces) of tags (or beginning of tags) required to shorten URLs (for example "nick_" to shorten URLs only in messages from other users) (default: "nick_")"
python.urlserver.separators = "separators for short url list (string with exactly 3 chars) (default: "[|]")"
python.urlserver.url_min_length = "minimum length for an URL to be shortened (0 = shorten all URLs, -1 = detect length based on shorten URL) (default: "0")"
python.urlserver.urls_amount = "number of URLs to keep in memory (and in file when script is not loaded) (default: "100")"
python.whois_on_query.command = "the command sent to do the whois ($nick is repladed by nick) (default: "/whois $nick $nick")"
python.whois_on_query.self_query = "if on, send whois for self queries (default: "off")"
ruby.colorizer.buffer_regex = "Only colorize text in buffers with names that match this regex. Leaving this empty matches all buffer names."
ruby.colorizer.rule.0 = "A colorizing rule of the form: <regular_expression>/<weechat_color_name> Empty rules are ignored."
ruby.colorizer.rule.1 = "A colorizing rule of the form: <regular_expression>/<weechat_color_name> Empty rules are ignored."
ruby.colorizer.rule.2 = "A colorizing rule of the form: <regular_expression>/<weechat_color_name> Empty rules are ignored."
ruby.colorizer.rule.3 = "A colorizing rule of the form: <regular_expression>/<weechat_color_name> Empty rules are ignored."
ruby.colorizer.rule.4 = "A colorizing rule of the form: <regular_expression>/<weechat_color_name> Empty rules are ignored."
ruby.colorizer.rule.count = "The maximum number of rules to look for in your config."
weenick.server_default.command = "command(s) to get processed upon identification"
weenick.server_default.nick = "registered nickname"
weenick.server_default.nickserv_failed = "string to identify notice that password is wrong"
weenick.server_default.nickserv_ghost_killed = "string to identify notice that ghost was killed"
weenick.server_default.nickserv_identified = "string to identify notice that nick was identified"
weenick.server_default.nickserv_nick = "nickname to send messages to"
weenick.server_default.nickserv_registered = "string to identify notice that nick is registered"
weenick.server_default.password = "password to identify/kill ghosts"
