!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
#	/store/config/vimrc	/^    nmap # <Plug>MarkSearchOrCurPrev$/;"	m	language:Vim
*	/store/config/vimrc	/^    nmap * <Plug>MarkSearchOrCurNext$/;"	m	language:Vim
,/	/store/config/vimrc	/^nnoremap <silent> ,\/ :execute 'vimgrep \/'.@\/.'\/g %'<CR>:copen<CR>$/;"	m	language:Vim
<	/store/config/vimrc	/^vnoremap < <gv$/;"	m	language:Vim
<C-F2>	/store/config/vimrc	/^nnoremap <C-F2> ^$/;"	m	language:Vim
<C-F3>	/store/config/vimrc	/^nnoremap <C-F3> \$$/;"	m	language:Vim
<C-F4>	/store/config/vimrc	/^nnoremap <C-F4> <Esc>:tabp<CR>$/;"	m	language:Vim
<C-F5>	/store/config/vimrc	/^nnoremap <C-F5> <Esc>:tabn<CR>$/;"	m	language:Vim
<C-F6>	/store/config/vimrc	/^vmap <C-F6> <F6>v`>$/;"	m	language:Vim
<C-F7>	/store/config/vimrc	/^nmap <C-F7> :set paste<CR>i<CR><CR><Esc>k:.!xclip -o<CR>JxkJx:set nopaste<CR>$/;"	m	language:Vim
<C-F8>	/store/config/vimrc	/^nnoremap <C-F8> :call ToggleVerbose()<CR>$/;"	m	language:Vim
<C-F9>	/store/config/vimrc	/^nnoremap <C-F9> :call ToggleXXD()<CR>$/;"	m	language:Vim
<C-\>	/store/config/vimrc	/^nnoremap <C-\\> <Esc>:SCCompileRun<CR>$/;"	m	language:Vim
<C-\>	/store/config/vimrc	/^vnoremap <C-\\> <Esc>:SCCompileRun<CR>$/;"	m	language:Vim
<C-]>	/store/config/vimrc	/^nnoremap <C-]> g<C-]>$/;"	m	language:Vim
<C-]>	/store/config/vimrc	/^vnoremap <C-]> g<C-]>$/;"	m	language:Vim
<C-e>	/store/config/vimrc	/^inoremap <C-e> <C-o>\$$/;"	m	language:Vim
<Esc>'	/store/config/vimrc	/^map <Esc>' <M-'>$/;"	m	language:Vim
<Esc>;	/store/config/vimrc	/^map <Esc>; <M-;>$/;"	m	language:Vim
<Esc><F12>	/store/config/vimrc	/^map <Esc><F12> <M-F12>$/;"	m	language:Vim
<Esc><F2>	/store/config/vimrc	/^map <Esc><F2> <M-F2>$/;"	m	language:Vim
<Esc><F3>	/store/config/vimrc	/^map <Esc><F3> <M-F3>$/;"	m	language:Vim
<Esc><F4>	/store/config/vimrc	/^map <Esc><F4> <M-F4>$/;"	m	language:Vim
<Esc><F5>	/store/config/vimrc	/^map <Esc><F5> <M-F5>$/;"	m	language:Vim
<Esc><F6>	/store/config/vimrc	/^map <Esc><F6> <M-F6>$/;"	m	language:Vim
<Esc><F7>	/store/config/vimrc	/^map <Esc><F7> <M-F7>$/;"	m	language:Vim
<Esc><F8>	/store/config/vimrc	/^map <Esc><F8> <M-F8>$/;"	m	language:Vim
<Esc><F9>	/store/config/vimrc	/^map <Esc><F9> <M-F9>$/;"	m	language:Vim
<F12>	visualrepeat/reapply.vim	/^nmap <F12> :<C-u>execute 'normal! gv'<CR>32:<C-u>echomsg '****' v:count<CR>$/;"	m
<F12>	visualrepeat/reapply.vim	/^nmap <F12> :<C-u>execute 'normal! gv'<CR>32:<C-u>execute 'normal! gv' . v:count . "A$\\<lt>Esc>"<CR>$/;"	m
<F12>	visualrepeat/reapply.vim	/^nmap <F12> :<C-u>execute 'normal! gv'<CR>32A$<Esc>$/;"	m
<F12>	visualrepeat/reapply.vim	/^nmap <F12> :<C-u>execute 'normal! gv32'<CR>:<C-u>echomsg '****' v:count<CR>$/;"	m
<F2>	/store/config/vimrc	/^nnoremap <F2> <Esc>:tabp<CR>$/;"	m	language:Vim
<F3>	/store/config/vimrc	/^nnoremap <F3> <Esc>:tabn<CR>$/;"	m	language:Vim
<F4>	/store/config/vimrc	/^nnoremap <F4> <C-u>$/;"	m	language:Vim
<F5>	/store/config/vimrc	/^nnoremap <F5> <C-d>$/;"	m	language:Vim
<F6>	/store/config/vimrc	/^vmap <F6> "+y<Esc>:call system("xclip -i -selection clipboard", getreg("\\""))$/;"	m	language:Vim
<F7>	/store/config/vimrc	/^nmap <F7> :call setreg("\\"",system("xclip -o -selection clipboard"))<CR>"+p$/;"	m	language:Vim
<F8>	/store/config/vimrc	/^nmap <F8> <Esc>:verbose map$/;"	m	language:Vim
<F9>	/store/config/vimrc	/^nnoremap <F9> :call ToggleFold()<CR>$/;"	m	language:Vim
<Leader>!	/store/config/vimrc	/^    nmap <Leader>!  <Plug>MarkSearchGroup1Prev$/;"	m	language:Vim
<Leader>"	/store/config/vimrc	/^nnoremap <Leader>" mzI# <Esc>`z$/;"	m	language:Vim
<Leader>'	/store/config/vimrc	/^nnoremap <Leader>' <Esc>:w!<CR>$/;"	m	language:Vim
<Leader>,	/store/config/vimrc	/^nnoremap <Leader>, <Esc>:s\/ .*:[0-9][0-9]\/\/$/;"	m	language:Vim
<Leader>-	/store/config/vimrc	/^noremap <Leader>- <Esc>[c$/;"	m	language:Vim
<Leader>.	/store/config/vimrc	/^nnoremap <Leader>. <Esc>:s\/[0-9]*\\. \/\/$/;"	m	language:Vim
<Leader>/	/store/config/vimrc	/^nnoremap <Leader>\/ <Esc>:%s\/\\(.*\\) by \\(.*\\)\/\\2 - \\1\/$/;"	m	language:Vim
<Leader>1	/store/config/vimrc	/^    nmap <Leader>1  <Plug>MarkSearchGroup1Next$/;"	m	language:Vim
<Leader>2	/store/config/vimrc	/^    nmap <Leader>2  <Plug>MarkSearchGroup2Next$/;"	m	language:Vim
<Leader>3	/store/config/vimrc	/^    nmap <Leader>3  <Plug>MarkSearchGroup2Next$/;"	m	language:Vim
<Leader>4	/store/config/vimrc	/^    nmap <Leader>4  <Plug>MarkSearchGroup2Next$/;"	m	language:Vim
<Leader>5	/store/config/vimrc	/^    nmap <Leader>5  <Plug>MarkSearchGroup2Next$/;"	m	language:Vim
<Leader>6	/store/config/vimrc	/^    nmap <Leader>6  <Plug>MarkSearchGroup2Next$/;"	m	language:Vim
<Leader>7	/store/config/vimrc	/^    nmap <Leader>7  <Plug>MarkSearchGroup2Next$/;"	m	language:Vim
<Leader>8	/store/config/vimrc	/^    nmap <Leader>8  <Plug>MarkSearchGroup2Next$/;"	m	language:Vim
<Leader>9	/store/config/vimrc	/^    nmap <Leader>9  <Plug>MarkSearchGroup2Next$/;"	m	language:Vim
<Leader>;	/store/config/vimrc	/^nnoremap <Leader>; <Esc>:q!<CR>$/;"	m	language:Vim
<Leader>=	/store/config/vimrc	/^noremap <Leader>= <Esc>]c$/;"	m	language:Vim
<Leader>M	/store/config/vimrc	/^    nmap <Leader>M <Plug>MarkToggle$/;"	m	language:Vim
<Leader>[	/store/config/vimrc	/^nnoremap <Leader>[ <Esc>:q<CR>$/;"	m	language:Vim
<Leader>]	/store/config/vimrc	/^nnoremap <Leader>] <Esc>:w<CR>$/;"	m	language:Vim
<Leader>a	/store/config/vimrc	/^nnoremap <Leader>a <Esc>:A<CR>$/;"	m	language:Vim
<Leader>cc	/store/config/vimrc	/^nnoremap <Leader>cc :%s\/\\<<C-r><C-w>\\>\/<C-r><C-w>$/;"	m	language:Vim
<Leader>cc	/store/config/vimrc	/^vnoremap <Leader>cc y:%s\/<C-r>"\/<C-r>"$/;"	m	language:Vim
<Leader>dg	/store/config/vimrc	/^nnoremap <Leader>dg <Esc>:diffget<CR>]c$/;"	m	language:Vim
<Leader>dg	/store/config/vimrc	/^vnoremap <Leader>dg <Esc>:'<,'>diffget<CR>]c$/;"	m	language:Vim
<Leader>dp	/store/config/vimrc	/^nnoremap <Leader>dp <Esc>:diffput<CR>]c$/;"	m	language:Vim
<Leader>dp	/store/config/vimrc	/^vnoremap <Leader>dp <Esc>:'<,'>diffput<CR>]c$/;"	m	language:Vim
<Leader>dw	/store/config/vimrc	/^nnoremap <Leader>dw <Esc>:wincmd p<CR>$/;"	m	language:Vim
<Leader>ew	/store/config/vimrc	/^nnoremap <Leader>ew <Esc>:tabe <C-r>=expand("%:p:h")."\/"<CR>$/;"	m	language:Vim
<Leader>h	/store/config/vimrc	/^nnoremap <Leader>h <Esc>:silent !cat \/store\/config\/mappings-vim.txt \\| sed 's\/^[ ]*\/\/' \\| less<CR>:redraw!<CR>$/;"	m	language:Vim
<Leader>n	/store/config/vimrc	/^    nmap <Leader>n <Plug>MarkConfirmAllClear$/;"	m	language:Vim
<Leader>o	/store/config/vimrc	/^nnoremap <Leader>o <Esc>:diffget<CR>]c$/;"	m	language:Vim
<Leader>o	/store/config/vimrc	/^vnoremap <Leader>o <Esc>:'<,'>diffget<CR>]c$/;"	m	language:Vim
<Leader>p	/store/config/vimrc	/^nnoremap <Leader>p <Esc>:diffput<CR>]c$/;"	m	language:Vim
<Leader>p	/store/config/vimrc	/^vnoremap <Leader>p <Esc>:'<,'>diffput<CR>]c$/;"	m	language:Vim
<Leader>rac	/store/config/vimrc	/^nnoremap <Leader>rac :%s\/<C-v><Esc>\\[\\(\\d\\{1,2}\\(;\\d\\{1,2}\\)\\{0,2\\}\\)\\?[m\\|K]\/\/g<CR>$/;"	m	language:Vim
<Leader>rc	/store/config/vimrc	/^nnoremap <Leader>rc :%s\/\\<<C-r><C-w>\\>\/$/;"	m	language:Vim
<Leader>rc	/store/config/vimrc	/^vnoremap <Leader>rc y:%s\/<C-r>"\/$/;"	m	language:Vim
<Leader>rts	/store/config/vimrc	/^nnoremap <Leader>rts :%s\/ \/    \/g<CR>$/;"	m	language:Vim
<Leader>s	/store/config/vimrc	/^nnoremap <Leader>s <Esc>:silent w! !sudo tee % >\/dev\/null<CR>$/;"	m	language:Vim
<Leader>u	/store/config/vimrc	/^nnoremap <Leader>u <Esc>:silent w! !sudo tee % >\/dev\/null<CR>$/;"	m	language:Vim
<Leader>v	/store/config/vimrc	/^nnoremap <Leader>v <Esc>:silent !cat \/store\/config\/100vimcommands.txt \\| sed 's\/^[ ]*\/\/' \\| less<CR>:redraw!<CR>$/;"	m	language:Vim
<M-'>	/store/config/vimrc	/^nnoremap <M-'> <Esc>:tab split<CR>:exec("tag ".expand("<cword>"))<CR>$/;"	m	language:Vim
<M-'>	/store/config/vimrc	/^vnoremap <M-'> <Esc>:tab split<CR>:exec("tag ".expand("<cword>"))<CR>$/;"	m	language:Vim
<M-;>	/store/config/vimrc	/^noremap <M-;> <Esc>:vsplit<CR>:wincmd w<CR>:exec("tag ".expand("<cword>"))<CR>$/;"	m	language:Vim
<M-;>	/store/config/vimrc	/^vnoremap <M-;> <Esc>:vsplit<CR>:wincmd w<CR>:exec("tag ".expand("<cword>"))<CR>$/;"	m	language:Vim
<M-F2>	/store/config/vimrc	/^nnoremap <M-F2> 0dw$/;"	m	language:Vim
<M-F4>	/store/config/vimrc	/^nnoremap <M-F4> <Esc>:set scrollbind<CR>$/;"	m	language:Vim
<M-F5>	/store/config/vimrc	/^nnoremap <M-F5> <Esc>:set noscb<CR>$/;"	m	language:Vim
<M-F6>	/store/config/vimrc	/^vmap <M-F6> :<Esc>`>a<CR><Esc>mx`<i<CR><Esc>my'xk$v'y!xclip -selection c<CR>u$/;"	m	language:Vim
<M-F7>	/store/config/vimrc	/^nmap <M-F7> mz:-1r !xclip -o -sel clip<CR>`z$/;"	m	language:Vim
<M-F8>	/store/config/vimrc	/^nnoremap <M-F8> :call ToggleHex()<CR>$/;"	m	language:Vim
<M-F9>	/store/config/vimrc	/^nnoremap <M-F9> :call ToggleIndent()<CR>$/;"	m	language:Vim
<M-c>	/store/config/vimrc	/^vmap <M-c> "*y$/;"	m	language:Vim
<M-v>	/store/config/vimrc	/^nmap <M-v> "*p$/;"	m	language:Vim
<M-x>	/store/config/vimrc	/^vmap <M-x> "*x$/;"	m	language:Vim
<Plug>IgnoreMarkSearchNext	/store/config/vimrc	/^    nmap <Plug>IgnoreMarkSearchNext <Plug>MarkSearchNext$/;"	m	language:Vim
<Plug>IgnoreMarkSearchPrev	/store/config/vimrc	/^    nmap <Plug>IgnoreMarkSearchPrev <Plug>MarkSearchPrev$/;"	m	language:Vim
<Plug>IgnoreMarkSet	/store/config/vimrc	/^    vmap <Plug>IgnoreMarkSet <Plug>MarkSet$/;"	m	language:Vim
<SID>(ReapplyRepeatCount)	visualrepeat/reapply.vim	/^vnoremap <silent> <expr> <SID>(ReapplyRepeatCount) visualrepeat#reapply#RepeatCount()$/;"	m
>	/store/config/vimrc	/^vnoremap > >gv$/;"	m	language:Vim
AdaptCollection	ingo/regexp/fromwildcard.vim	/^function! s:AdaptCollection()$/;"	f
AdditionalMovement	CountJump.vim	/^function! s:AdditionalMovement( isSpecialLastLineTreatment )$/;"	f
Align	ingo/date.vim	/^function! s:Align( isShortFormat, isRightAligned, text )$/;"	f
Binary	/store/config/vimrc	/^augroup Binary$/;"	a	language:Vim
CanonicalizeArguments	ConflictMotions.vim	/^function! s:CanonicalizeArguments( arguments, startLnum, endLnum )$/;"	f
CanonicalizeWildcard	ingo/regexp/fromwildcard.vim	/^function! s:CanonicalizeWildcard( expr, pathSeparator )$/;"	f
CaptureSection	ConflictMotions.vim	/^function! s:CaptureSection()$/;"	f
Collect	ingo/str/frompattern.vim	/^function! s:Collect( accumulatorMatches, isUnique )$/;"	f
ConflictMotions#Complete	ConflictMotions.vim	/^function! ConflictMotions#Complete( ArgLead, CmdLine, CursorPos )$/;"	f
ConflictMotions#Take	ConflictMotions.vim	/^function! ConflictMotions#Take( takeStartLnum, takeEndLnum, arguments )$/;"	f
ConflictMotions#TakeFromConflict	ConflictMotions.vim	/^function! ConflictMotions#TakeFromConflict( conflictCnt, currentLnum, startLnum, endLnum, arguments, defaultArgument, isKeepRange, takeStartLnum, takeEndLnum )$/;"	f
Convert	ingo/regexp/fromwildcard.vim	/^function! s:Convert( wildcardExpr, ... )$/;"	f
ConvertMagicness	ingo/regexp/magic.vim	/^function! s:ConvertMagicness( pattern, sourceSpecialCharacterExpr, targetSpecialCharacterExpr )$/;"	f
CountJump#CountJump	CountJump.vim	/^function! CountJump#CountJump( mode, ... )$/;"	f
CountJump#CountJumpFunc	CountJump.vim	/^function! CountJump#CountJumpFunc( count, SingleJumpFunc, ... )$/;"	f
CountJump#CountJumpFuncWithWrapMessage	CountJump.vim	/^function! CountJump#CountJumpFuncWithWrapMessage( count, searchName, isBackward, SingleJumpFunc, ... )$/;"	f
CountJump#CountJumpWithWrapMessage	CountJump.vim	/^function! CountJump#CountJumpWithWrapMessage( mode, searchName, ... )$/;"	f
CountJump#CountSearch	CountJump.vim	/^function! CountJump#CountSearch( count, searchArguments )$/;"	f
CountJump#CountSearchWithWrapMessage	CountJump.vim	/^function! CountJump#CountSearchWithWrapMessage( count, searchName, searchArguments )$/;"	f
CountJump#JumpFunc	CountJump.vim	/^function! CountJump#JumpFunc( mode, JumpFunc, ... )$/;"	f
EchoQuestion	ConflictMotions.vim	/^function! s:EchoQuestion( conflictCnt )$/;"	f
Encode	ingo/codec/URL.vim	/^function! s:Encode( chars, text )$/;"	f
FindEndOfConflict	ConflictMotions.vim	/^function! s:FindEndOfConflict()$/;"	f
FoldBorder	ingo/folds.vim	/^function! s:FoldBorder( lnum, direction )$/;"	f
GetCurrentConflict	ConflictMotions.vim	/^function! s:GetCurrentConflict( currentLnum )$/;"	f
Hashbang	/store/config/vimrc	/^function! Hashbang(portable, permission, RemExt)$/;"	f	language:Vim
OmniCpp_MayCompleteArrow	/store/config/vimrc	/^let OmniCpp_MayCompleteArrow=1$/;"	v	language:Vim
OmniCpp_MayCompleteDot	/store/config/vimrc	/^let OmniCpp_MayCompleteDot=1$/;"	v	language:Vim
OmniCpp_MayCompleteScope	/store/config/vimrc	/^let OmniCpp_MayCompleteScope=1$/;"	v	language:Vim
Query	ConflictMotions.vim	/^function! s:Query( conflictCnt, startLnum, endLnum )$/;"	f
Relative	ingo/date.vim	/^function! s:Relative( isShortFormat, isRightAligned, isInFuture, time, timeunit )$/;"	f
ResCur	/store/config/vimrc	/^function! ResCur()$/;"	f	language:Vim
SetErrorAndBeep	ConflictMotions.vim	/^function! s:SetErrorAndBeep( msg )$/;"	f
ToggleFold	/store/config/vimrc	/^function! ToggleFold()$/;"	f	language:Vim
ToggleHex	/store/config/vimrc	/^function! ToggleHex()$/;"	f	language:Vim
ToggleIndent	/store/config/vimrc	/^function! ToggleIndent()$/;"	f	language:Vim
ToggleVerbose	/store/config/vimrc	/^function! ToggleVerbose()$/;"	f	language:Vim
ToggleXXD	/store/config/vimrc	/^function! ToggleXXD()$/;"	f	language:Vim
UnfoldCur	/store/config/vimrc	/^  function! UnfoldCur()$/;"	f	language:Vim
WrapMessage	CountJump.vim	/^function! s:WrapMessage( searchName, isBackward )$/;"	f
Y	/store/config/vimrc	/^noremap Y y\$$/;"	m	language:Vim
[15;5~	/store/config/vimrc	/^map [15;5~ <C-F5>$/;"	m	language:Vim
[17;5~	/store/config/vimrc	/^map [17;5~ <C-F6>$/;"	m	language:Vim
[18;5~	/store/config/vimrc	/^map [18;5~ <C-F7>$/;"	m	language:Vim
[19;5~	/store/config/vimrc	/^map [19;5~ <C-F8>$/;"	m	language:Vim
[1;5Q	/store/config/vimrc	/^map [1;5Q <C-F2>$/;"	m	language:Vim
[1;5R	/store/config/vimrc	/^map [1;5R <C-F3>$/;"	m	language:Vim
[1;5S	/store/config/vimrc	/^map [1;5S <C-F4>$/;"	m	language:Vim
[20;5~	/store/config/vimrc	/^map [20;5~ <C-F9>$/;"	m	language:Vim
[24;5~	/store/config/vimrc	/^map [24;5~ <C-F12>$/;"	m	language:Vim
_compare	vital/_quickrun/Data/List.vim	/^function! s:_compare(a, b) abort$/;"	f
_compare	vital/_wandbox_vim/Data/List.vim	/^function! s:_compare(a, b)$/;"	f
_default_compare	vital/_quickrun/Data/List.vim	/^function! s:_default_compare(a, b) abort$/;"	f
_deprecated	vital/_wandbox_vim/Prelude.vim	/^function! s:_deprecated(fname, newname)$/;"	f
_dot_to_sharp	vital/quickrun.vim	/^function! s:_dot_to_sharp(name) abort$/;"	f
_exists_autoload_func_with_source	vital/quickrun.vim	/^function! s:_exists_autoload_func_with_source(funcname) abort$/;"	f
_expand_short_option	vital/_wandbox_vim/OptionParser.vim	/^function! s:_expand_short_option(arg, options)$/;"	f
_extract_files	vital/quickrun.vim	/^function! s:_extract_files(pattern, files) abort$/;"	f
_extract_special_opts	vital/_wandbox_vim/OptionParser.vim	/^function! s:_extract_special_opts(argc, argv)$/;"	f
_file2module	vital/quickrun.vim	/^function! s:_file2module(file) abort$/;"	f
_find_tabpage	vital/_quickrun/Vim/ViewTracer.vim	/^function! s:_find_tabpage(scope_var) abort$/;"	f
_find_window	vital/_quickrun/Vim/ViewTracer.vim	/^function! s:_find_window(scope_var) abort$/;"	f
_function	vital/quickrun.vim	/^  function! s:_function(fstr) abort$/;"	f
_get_async_client	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:_get_async_client(settings)$/;"	f
_get_builtin_module	vital/quickrun.vim	/^function! s:_get_builtin_module(name) abort$/;"	f
_get_client	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:_get_client(settings)$/;"	f
_get_functions	vital/_wandbox_vim.vim	/^  function! s:_get_functions(sid)$/;"	f
_get_module	vital/quickrun.vim	/^function! s:_get_module(name) abort dict$/;"	f
_get_module_path	vital/_wandbox_vim.vim	/^function! s:_get_module_path(name)$/;"	f
_gettabdict	vital/_quickrun/Vim/ViewTracer.vim	/^  function! s:_gettabdict(tabnr) abort$/;"	f
_global_vital_files	vital/quickrun.vim	/^function! s:_global_vital_files() abort$/;"	f
_has_copy_dir_exe	vital/_quickrun/System/File.vim	/^  function! s:_has_copy_dir_exe() abort$/;"	f
_has_copy_exe	vital/_quickrun/System/File.vim	/^  function! s:_has_copy_exe() abort$/;"	f
_has_move_exe	vital/_quickrun/System/File.vim	/^  function! s:_has_move_exe() abort$/;"	f
_import	vital/_wandbox_vim.vim	/^function! s:_import(name)$/;"	f
_import	vital/quickrun.vim	/^function! s:_import(name) abort dict$/;"	f
_import_func_name	vital/quickrun.vim	/^function! s:_import_func_name(plugin_name, module_name) abort$/;"	f
_is_absolute_path	vital/_wandbox_vim.vim	/^  function! s:_is_absolute_path(path)$/;"	f
_is_cmdwin	quickrun/runner/concurrent_process.vim	/^function! s:_is_cmdwin() abort$/;"	f
_long_option_completion	vital/_wandbox_vim/OptionParser.vim	/^function! s:_long_option_completion(arglead, options)$/;"	f
_make_args	vital/_wandbox_vim/OptionParser.vim	/^function! s:_make_args(cmd_args)$/;"	f
_make_header_args	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:_make_header_args(headdata, option, quote)$/;"	f
_make_option_definition_for_help	vital/_wandbox_vim/OptionParser.vim	/^function! s:_make_option_definition_for_help(opt)$/;"	f
_make_option_description_for_help	vital/_wandbox_vim/OptionParser.vim	/^function! s:_make_option_description_for_help(opt)$/;"	f
_make_postfile	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:_make_postfile(data)$/;"	f
_module_path	vital/quickrun.vim	/^function! s:_module_path(name) abort$/;"	f
_module_sid	vital/quickrun.vim	/^function! s:_module_sid(name) abort$/;"	f
_module_sid_base_dir	vital/quickrun.vim	/^function! s:_module_sid_base_dir() abort$/;"	f
_move	vital/_quickrun/Vim/ViewTracer.vim	/^function! s:_move(tabnr, winnr) abort$/;"	f
_pad_with_char	vital/_quickrun/Data/String.vim	/^function! s:_pad_with_char(str, left, right, char) abort$/;"	f
_pad_with_char	vital/_wandbox_vim/Data/String.vim	/^function! s:_pad_with_char(str, left, right, char)$/;"	f
_parse_arg	vital/_wandbox_vim/OptionParser.vim	/^function! s:_parse_arg(arg, options)$/;"	f
_parse_args	vital/_wandbox_vim/OptionParser.vim	/^function! s:_parse_args(cmd_args, options)$/;"	f
_path2project_directory_git	vital/_quickrun/Prelude.vim	/^function! s:_path2project_directory_git(path) abort$/;"	f
_path2project_directory_git	vital/_wandbox_vim/Prelude.vim	/^function! s:_path2project_directory_git(path)$/;"	f
_path2project_directory_others	vital/_quickrun/Prelude.vim	/^function! s:_path2project_directory_others(vcs, path) abort$/;"	f
_path2project_directory_others	vital/_wandbox_vim/Prelude.vim	/^function! s:_path2project_directory_others(vcs, path)$/;"	f
_path2project_directory_svn	vital/_quickrun/Prelude.vim	/^function! s:_path2project_directory_svn(path) abort$/;"	f
_path2project_directory_svn	vital/_wandbox_vim/Prelude.vim	/^function! s:_path2project_directory_svn(path)$/;"	f
_postdata	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:_postdata(data)$/;"	f
_quote	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:_quote()$/;"	f
_read	vital/_quickrun/ConcurrentProcess.vim	/^function! s:_read(pi, rname) abort$/;"	f
_readfile	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:_readfile(file)$/;"	f
_redir	vital/_wandbox_vim.vim	/^function! s:_redir(cmd)$/;"	f
_redir	vital/quickrun.vim	/^function! s:_redir(cmd) abort$/;"	f
_replace	vital/_quickrun/Data/String.vim	/^function! s:_replace(str, from, to, flags) abort$/;"	f
_replace	vital/_wandbox_vim/Data/String.vim	/^function! s:_replace(str, from, to, flags)$/;"	f
_runtime	vital/quickrun.vim	/^function! s:_runtime(path) abort$/;"	f
_scripts	vital/_wandbox_vim.vim	/^function! s:_scripts()$/;"	f
_self_vital_files	vital/quickrun.vim	/^function! s:_self_vital_files() abort$/;"	f
_set_default_values	vital/_wandbox_vim/OptionParser.vim	/^function! s:_set_default_values(parsed_args, options)$/;"	f
_sfuncname	vital/quickrun.vim	/^function! s:_sfuncname(sid, funcname) abort$/;"	f
_shellescape_robocopy	vital/_quickrun/System/File.vim	/^  function! s:_shellescape_robocopy(path) abort$/;"	f
_short_option_completion	vital/_wandbox_vim/OptionParser.vim	/^function! s:_short_option_completion(arglead, options)$/;"	f
_sid	vital/quickrun.vim	/^function! s:_sid(path, filter_pattern) abort$/;"	f
_source	vital/quickrun.vim	/^function! s:_source(path) abort$/;"	f
_split_at_last_newline	vital/_quickrun/ConcurrentProcess.vim	/^function! s:_split_at_last_newline(str) abort$/;"	f
_split_by_wcswidth	vital/_quickrun/Data/String.vim	/^function! s:_split_by_wcswidth(body, x) abort$/;"	f
_split_by_wcswidth	vital/_wandbox_vim/Data/String.vim	/^function! s:_split_by_wcswidth(body, x)$/;"	f
_split_by_wcswidth_once	vital/_quickrun/Data/String.vim	/^function! s:_split_by_wcswidth_once(body, x) abort$/;"	f
_split_by_wcswidth_once	vital/_wandbox_vim/Data/String.vim	/^function! s:_split_by_wcswidth_once(body, x)$/;"	f
_unify_path	vital/_wandbox_vim.vim	/^  function! s:_unify_path(path)$/;"	f
_unify_path	vital/quickrun.vim	/^  function! s:_unify_path(path) abort$/;"	f
_uniq	vital/quickrun.vim	/^  function! s:_uniq(list) abort$/;"	f
_user_defined_completion	vital/_wandbox_vim/OptionParser.vim	/^function! s:_user_defined_completion(lead, name, options, cmdline, cursorpos)$/;"	f
_user_defined_short_option_completion	vital/_wandbox_vim/OptionParser.vim	/^function! s:_user_defined_short_option_completion(lead, def, options, cmdline, cursorpos)$/;"	f
_vital_depends	vital/_quickrun/ConcurrentProcess.vim	/^function! s:_vital_depends() abort$/;"	f
_vital_depends	vital/_quickrun/Data/String.vim	/^function! s:_vital_depends() abort$/;"	f
_vital_depends	vital/_quickrun/System/File.vim	/^function! s:_vital_depends() abort$/;"	f
_vital_depends	vital/_wandbox_vim/Data/String.vim	/^function! s:_vital_depends()$/;"	f
_vital_depends	vital/_wandbox_vim/OptionParser.vim	/^function! s:_vital_depends()$/;"	f
_vital_depends	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:_vital_depends()$/;"	f
_vital_depends	vital/_wandbox_vim/Web/JSON.vim	/^function! s:_vital_depends()$/;"	f
_vital_loaded	vital/_quickrun/ConcurrentProcess.vim	/^function! s:_vital_loaded(V) abort$/;"	f
_vital_loaded	vital/_quickrun/Data/String.vim	/^function! s:_vital_loaded(V) abort$/;"	f
_vital_loaded	vital/_quickrun/System/File.vim	/^function! s:_vital_loaded(V) abort$/;"	f
_vital_loaded	vital/_wandbox_vim/Data/String.vim	/^function! s:_vital_loaded(V)$/;"	f
_vital_loaded	vital/_wandbox_vim/OptionParser.vim	/^function! s:_vital_loaded(V)$/;"	f
_vital_loaded	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:_vital_loaded(V)$/;"	f
_vital_loaded	vital/_wandbox_vim/Web/JSON.vim	/^function! s:_vital_loaded(V)$/;"	f
_warn_deprecated	vital/_quickrun/Prelude.vim	/^function! s:_warn_deprecated(name, alternative) abort$/;"	f
_wcwidth	vital/_quickrun/Data/String.vim	/^  function! s:_wcwidth(ucs) abort$/;"	f
_wcwidth	vital/_quickrun/Prelude.vim	/^  function! s:_wcwidth(ucs) abort$/;"	f
_wcwidth	vital/_wandbox_vim/Prelude.vim	/^  function! s:_wcwidth(ucs)$/;"	f
abort	quickrun/runner/wandbox.vim	/^function! s:abort(session, msg)$/;"	f
abort	wandbox.vim	/^function! s:abort(message)$/;"	f
abspath	vital/_quickrun/System/Filepath.vim	/^function! s:abspath(path) abort$/;"	f
add	ingo/collections.vim	/^function! s:add( list, expr, keepempty )$/;"	f
all	vital/_quickrun/Data/List.vim	/^function! s:all(f, xs) abort$/;"	f
all	vital/_wandbox_vim/Data/List.vim	/^function! s:all(f, xs)$/;"	f
and	vital/_quickrun/Data/List.vim	/^function! s:and(xs) abort$/;"	f
and	vital/_wandbox_vim/Data/List.vim	/^function! s:and(xs)$/;"	f
any	vital/_quickrun/Data/List.vim	/^function! s:any(f, xs) abort$/;"	f
any	vital/_wandbox_vim/Data/List.vim	/^function! s:any(f, xs)$/;"	f
basename	vital/_quickrun/System/Filepath.vim	/^function! s:basename(path) abort$/;"	f
binary_search	vital/_quickrun/Data/List.vim	/^function! s:binary_search(list, value, ...) abort$/;"	f
break	vital/_quickrun/Data/List.vim	/^function! s:break(f, xs) abort$/;"	f
break	vital/_wandbox_vim/Data/List.vim	/^function! s:break(f, xs)$/;"	f
capture	vital/_quickrun/Vim/Message.vim	/^function! s:capture(command) abort$/;"	f
char_range	vital/_quickrun/Data/List.vim	/^function! s:char_range(from, to) abort$/;"	f
char_range	vital/_wandbox_vim/Data/List.vim	/^function! s:char_range(from, to)$/;"	f
chomp	vital/_quickrun/Data/String.vim	/^function! s:chomp(str) abort "{{{$/;"	f
chomp	vital/_wandbox_vim/Data/String.vim	/^function! s:chomp(str) "{{{$/;"	f
chop	vital/_quickrun/Data/String.vim	/^function! s:chop(str) abort "{{{$/;"	f
chop	vital/_wandbox_vim/Data/String.vim	/^function! s:chop(str) "{{{$/;"	f
clear	vital/_quickrun/Data/List.vim	/^function! s:clear(list) abort$/;"	f
clear	vital/_wandbox_vim/Data/List.vim	/^function! s:clear(list)$/;"	f
clients.curl._command	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:clients.curl._command(settings)$/;"	f
clients.curl.available	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:clients.curl.available(settings)$/;"	f
clients.curl.on_complete	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:clients.curl.on_complete(files)$/;"	f
clients.curl.request	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:clients.curl.request(settings)$/;"	f
clients.curl.request_async	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:clients.curl.request_async(settings)$/;"	f
clients.python.available	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:clients.python.available(settings)$/;"	f
clients.python.request	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:clients.python.request(settings)$/;"	f
clients.wget._command	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:clients.wget._command(settings)$/;"	f
clients.wget.available	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:clients.wget.available(settings)$/;"	f
clients.wget.on_complete	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:clients.wget.on_complete(files)$/;"	f
clients.wget.request	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:clients.wget.request(settings)$/;"	f
clients.wget.request_async	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:clients.wget.request_async(settings)$/;"	f
combinations	vital/_quickrun/Data/List.vim	/^function! s:combinations(list, r) abort$/;"	f
common_head	vital/_quickrun/Data/String.vim	/^function! s:common_head(strs) abort$/;"	f
common_head	vital/_wandbox_vim/Data/String.vim	/^function! s:common_head(strs)$/;"	f
concat	vital/_quickrun/Data/List.vim	/^function! s:concat(list) abort$/;"	f
concat	vital/_wandbox_vim/Data/List.vim	/^function! s:concat(list)$/;"	f
conj	vital/_quickrun/Data/List.vim	/^function! s:conj(xs, x) abort$/;"	f
conj	vital/_wandbox_vim/Data/List.vim	/^function! s:conj(xs, x)$/;"	f
cons	vital/_quickrun/Data/List.vim	/^function! s:cons(x, xs) abort$/;"	f
cons	vital/_wandbox_vim/Data/List.vim	/^function! s:cons(x, xs)$/;"	f
consume	vital/_quickrun/ConcurrentProcess.vim	/^function! s:consume(label, varname) abort$/;"	f
consume_all_blocking	vital/_quickrun/ConcurrentProcess.vim	/^function! s:consume_all_blocking(label, varname, timeout_sec) abort$/;"	f
contains	vital/_quickrun/System/Filepath.vim	/^function! s:contains(path, base) abort$/;"	f
contains_multibyte	vital/_quickrun/Data/String.vim	/^function! s:contains_multibyte(str) abort "{{{$/;"	f
contains_multibyte	vital/_wandbox_vim/Data/String.vim	/^function! s:contains_multibyte(str) "{{{$/;"	f
conv_vim2remote	quickrun/runner/remote.vim	/^function! s:conv_vim2remote(runner, selfvim, cmd) abort$/;"	f
copy	vital/_quickrun/System/File.vim	/^function! s:copy(src, dest) abort$/;"	f
copy_dir	vital/_quickrun/System/File.vim	/^function! s:copy_dir(src, dest) abort$/;"	f
copy_dir_exe	vital/_quickrun/System/File.vim	/^  function! s:copy_dir_exe() abort$/;"	f
copy_dir_exe	vital/_quickrun/System/File.vim	/^  function! s:copy_dir_exe(src, dest) abort$/;"	f
copy_dir_vim	vital/_quickrun/System/File.vim	/^function! s:copy_dir_vim(src, dest) abort$/;"	f
copy_exe	vital/_quickrun/System/File.vim	/^  function! s:copy_exe() abort$/;"	f
copy_exe	vital/_quickrun/System/File.vim	/^  function! s:copy_exe(src, dest) abort$/;"	f
copy_vim	vital/_quickrun/System/File.vim	/^function! s:copy_vim(src, dest) abort$/;"	f
decode	vital/_wandbox_vim/Web/JSON.vim	/^function! s:decode(json)$/;"	f
decodeURI	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:decodeURI(str)$/;"	f
deepextend	quickrun/module.vim	/^function! s:deepextend(a, b) abort$/;"	f
diffidx	vital/_quickrun/Data/String.vim	/^function! s:diffidx(a, b) abort$/;"	f
diffidx	vital/_wandbox_vim/Data/String.vim	/^function! s:diffidx(a, b)$/;"	f
dirname	vital/_quickrun/System/Filepath.vim	/^function! s:dirname(path) abort$/;"	f
do_inu_animation	wandbox.vim	/^function! s:do_inu_animation()$/;"	f
do_output_with_workaround	wandbox.vim	/^function! s:do_output_with_workaround()$/;"	f
dstring	vital/_quickrun/Data/String.vim	/^function! s:dstring(expr) abort$/;"	f
dstring	vital/_wandbox_vim/Data/String.vim	/^function! s:dstring(expr)$/;"	f
dump_result	wandbox.vim	/^function! s:dump_result(compiler, result)$/;"	f
dump_with_quickfix	wandbox.vim	/^function! s:dump_with_quickfix(results, file, bufnr)$/;"	f
echo	vital/_quickrun/Vim/Message.vim	/^function! s:echo(hl, msg) abort$/;"	f
echo	wandbox.vim	/^function! s:echo(string)$/;"	f
echo_complete_message	wandbox.vim	/^function! s:echo_complete_message(no_compiler_msg, no_program_msg)$/;"	f
echomsg	vital/_quickrun/Vim/Message.vim	/^function! s:echomsg(hl, msg) abort$/;"	f
encode	vital/_wandbox_vim/Web/JSON.vim	/^function! s:encode(val)$/;"	f
encodeURI	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:encodeURI(items)$/;"	f
encodeURIComponent	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:encodeURIComponent(items)$/;"	f
ends_with	vital/_quickrun/Data/String.vim	/^function! s:ends_with(str, suffix) abort$/;"	f
error	vital/_quickrun/Vim/Message.vim	/^function! s:error(msg) abort$/;"	f
escape	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:escape(str)$/;"	f
escape_file_pattern	quickrun/outputter/buffer.vim	/^function! s:escape_file_pattern(pat) abort$/;"	f
escape_file_searching	vital/_quickrun/Prelude.vim	/^function! s:escape_file_searching(buffer_name) abort$/;"	f
escape_file_searching	vital/_wandbox_vim/Prelude.vim	/^function! s:escape_file_searching(buffer_name)$/;"	f
escape_pattern	vital/_quickrun/Data/String.vim	/^function! s:escape_pattern(str) abort$/;"	f
escape_pattern	vital/_quickrun/Prelude.vim	/^function! s:escape_pattern(str) abort$/;"	f
escape_pattern	vital/_wandbox_vim/Prelude.vim	/^function! s:escape_pattern(str)$/;"	f
execute	quickrun/runner/shell.vim	/^function! s:execute(cmd) abort$/;"	f
execute	quickrun/runner/system.vim	/^function! s:execute(cmd, input) abort$/;"	f
execute	quickrun/runner/vimscript.vim	/^function! s:execute(cmd) abort$/;"	f
exists	vital/_quickrun/Vim/ViewTracer.vim	/^function! s:exists(handle) abort$/;"	f
exists	vital/quickrun.vim	/^function! s:exists(name) abort dict$/;"	f
expand_included_files	wandbox.vim	/^function! s:expand_included_files(buf)$/;"	f
fcntl,	quickrun/runner/python.vim	/^        import fcntl, os$/;"	m
filetype	wandbox.vim	/^function! s:filetype(parsed)$/;"	f
find	vital/_quickrun/Data/List.vim	/^function! s:find(list, default, f) abort$/;"	f
find	vital/_quickrun/Vim/ViewTracer.vim	/^function! s:find(handle) abort$/;"	f
find	vital/_wandbox_vim/Data/List.vim	/^function! s:find(list, default, f)$/;"	f
find_index	vital/_quickrun/Data/List.vim	/^function! s:find_index(xs, f, ...) abort$/;"	f
find_indices	vital/_quickrun/Data/List.vim	/^function! s:find_indices(xs, f, ...) abort$/;"	f
find_last_index	vital/_quickrun/Data/List.vim	/^function! s:find_last_index(xs, f, ...) abort$/;"	f
flatten	vital/_quickrun/Data/List.vim	/^function! s:flatten(list, ...) abort$/;"	f
flatten	vital/_wandbox_vim/Data/List.vim	/^function! s:flatten(list, ...)$/;"	f
foldl	vital/_quickrun/Data/List.vim	/^function! s:foldl(f, init, xs) abort$/;"	f
foldl	vital/_wandbox_vim/Data/List.vim	/^function! s:foldl(f, init, xs)$/;"	f
foldl1	vital/_quickrun/Data/List.vim	/^function! s:foldl1(f, xs) abort$/;"	f
foldl1	vital/_wandbox_vim/Data/List.vim	/^function! s:foldl1(f, xs)$/;"	f
foldr	vital/_quickrun/Data/List.vim	/^function! s:foldr(f, init, xs) abort$/;"	f
foldr	vital/_wandbox_vim/Data/List.vim	/^function! s:foldr(f, init, xs)$/;"	f
foldr1	vital/_quickrun/Data/List.vim	/^function! s:foldr1(f, xs) abort$/;"	f
foldr1	vital/_wandbox_vim/Data/List.vim	/^function! s:foldr1(f, xs)$/;"	f
format_process_result	quickrun/runner/wandbox.vim	/^function! s:format_process_result(content, file)$/;"	f
format_process_result	wandbox.vim	/^function! s:format_process_result(content)$/;"	f
function	CountJump/Region/TextObject.vim	/^function! s:function(name)$/;"	f
function	CountJump/TextObject.vim	/^function! s:function(name)$/;"	f
g:IngoLibrary_PreferredDateFormat	ingo/date/format.vim	/^    let g:IngoLibrary_PreferredDateFormat = '%x'$/;"	v
g:IngoLibrary_TruncateEllipsis	ingo/strdisplaywidth.vim	/^    let g:IngoLibrary_TruncateEllipsis = (&encoding ==# 'utf-8' ? '…' : '...')$/;"	v
g:easytags_always_enabled	/store/config/vimrc	/^let g:easytags_always_enabled=0$/;"	v	language:Vim
g:easytags_async	/store/config/vimrc	/^let g:easytags_async=1$/;"	v	language:Vim
g:easytags_auto_highlight	/store/config/vimrc	/^let g:easytags_auto_highlight=1$/;"	v	language:Vim
g:easytags_dynamic_files	/store/config/vimrc	/^let g:easytags_dynamic_files=0$/;"	v	language:Vim
g:easytags_include_members	/store/config/vimrc	/^let g:easytags_include_members=1$/;"	v	language:Vim
g:easytags_on_cursorhold	/store/config/vimrc	/^let g:easytags_on_cursorhold=1$/;"	v	language:Vim
g:easytags_resolve_links	/store/config/vimrc	/^let g:easytags_resolve_links=1$/;"	v	language:Vim
g:gruvbox_contrast_dark	/store/config/vimrc	/^let g:gruvbox_contrast_dark='high'$/;"	v	language:Vim
g:gruvbox_contrast_light	/store/config/vimrc	/^let g:gruvbox_contrast_light='high'$/;"	v	language:Vim
g:gruvbox_improved_strings	/store/config/vimrc	/^let g:gruvbox_improved_strings=0$/;"	v	language:Vim
g:gruvbox_improved_warnings	/store/config/vimrc	/^let g:gruvbox_improved_warnings=0$/;"	v	language:Vim
g:loaded_repeat	repeat.vim	/^let g:loaded_repeat = 1$/;"	v
g:mwAutoLoadMarks	/store/config/vimrc	/^let g:mwAutoLoadMarks = 1$/;"	v	language:Vim
g:mwDefaultHighlightingPalette	/store/config/vimrc	/^  let g:mwDefaultHighlightingPalette='maximum'$/;"	v	language:Vim
g:mwDefaultHighlightingPalette	/store/config/vimrc	/^let g:mwDefaultHighlightingPalette = 'maximum'$/;"	v	language:Vim
g:mwDirectGroupJumpMappingNum	/store/config/vimrc	/^    let g:mwDirectGroupJumpMappingNum = 50$/;"	v	language:Vim
g:mwIgnoreCase	/store/config/vimrc	/^let g:mwIgnoreCase = 0$/;"	v	language:Vim
g:prettyprint_indent	wandbox/prettyprint.vim	/^  let g:prettyprint_indent = '&l:shiftwidth'$/;"	v
g:prettyprint_indent	wandbox/prettyprint.vim	/^  let g:prettyprint_indent = '&l:shiftwidth'$/;"	v
g:prettyprint_show_expression	wandbox/prettyprint.vim	/^  let g:prettyprint_show_expression = 0$/;"	v
g:prettyprint_show_expression	wandbox/prettyprint.vim	/^  let g:prettyprint_show_expression = 0$/;"	v
g:prettyprint_string	wandbox/prettyprint.vim	/^  let g:prettyprint_string = []$/;"	v
g:prettyprint_string	wandbox/prettyprint.vim	/^  let g:prettyprint_string = []$/;"	v
g:prettyprint_width	wandbox/prettyprint.vim	/^  let g:prettyprint_width = '&columns'$/;"	v
g:prettyprint_width	wandbox/prettyprint.vim	/^  let g:prettyprint_width = '&columns'$/;"	v
g:rbpt_loadcmd_toggle	/store/config/vimrc	/^let g:rbpt_loadcmd_toggle = 0$/;"	v	language:Vim
g:rbpt_max	/store/config/vimrc	/^let g:rbpt_max = 16$/;"	v	language:Vim
g:repeat_tick	repeat.vim	/^let g:repeat_tick = -1$/;"	v
g:solarized_contrast	/store/config/vimrc	/^  let g:solarized_contrast='high'$/;"	v	language:Vim
g:solarized_contrast	/store/config/vimrc	/^  let g:solarized_contrast='low'$/;"	v	language:Vim
g:solarized_degrade	/store/config/vimrc	/^  let g:solarized_degrade=0$/;"	v	language:Vim
g:solarized_degrade	/store/config/vimrc	/^  let g:solarized_degrade=0$/;"	v	language:Vim
g:solarized_diffmode	/store/config/vimrc	/^let g:solarized_diffmode='high'$/;"	v	language:Vim
g:solarized_hitrail	/store/config/vimrc	/^let g:solarized_hitrail=1$/;"	v	language:Vim
g:solarized_termcolors	/store/config/vimrc	/^  let g:solarized_termcolors=16$/;"	v	language:Vim
g:solarized_termcolors	/store/config/vimrc	/^  let g:solarized_termcolors=256$/;"	v	language:Vim
g:solarized_termtrans	/store/config/vimrc	/^  let g:solarized_termtrans=0$/;"	v	language:Vim
g:solarized_termtrans	/store/config/vimrc	/^  let g:solarized_termtrans=1$/;"	v	language:Vim
g:solarized_visibility	/store/config/vimrc	/^  let g:solarized_visibility='normal'$/;"	v	language:Vim
g:solarized_visibility	/store/config/vimrc	/^  let g:solarized_visibility='normal'$/;"	v	language:Vim
g:startify_bookmarks	/store/config/vimrc	/^let g:startify_bookmarks = [$/;"	v	language:Vim
g:startify_change_to_dir	/store/config/vimrc	/^let g:startify_change_to_dir          = 1$/;"	v	language:Vim
g:startify_custom_footer	/store/config/vimrc	/^let g:startify_custom_footer =$/;"	v	language:Vim
g:startify_custom_header	/store/config/vimrc	/^let g:startify_custom_header =$/;"	v	language:Vim
g:startify_enable_special	/store/config/vimrc	/^let g:startify_enable_special         = 1$/;"	v	language:Vim
g:startify_files_number	/store/config/vimrc	/^let g:startify_files_number           = 8$/;"	v	language:Vim
g:startify_list_order	/store/config/vimrc	/^let g:startify_list_order = [$/;"	v	language:Vim
g:startify_relative_path	/store/config/vimrc	/^let g:startify_relative_path          = 1$/;"	v	language:Vim
g:startify_session_autoload	/store/config/vimrc	/^let g:startify_session_autoload       = 1$/;"	v	language:Vim
g:startify_session_delete_buffers	/store/config/vimrc	/^let g:startify_session_delete_buffers = 1$/;"	v	language:Vim
g:startify_session_persistence	/store/config/vimrc	/^let g:startify_session_persistence    = 1$/;"	v	language:Vim
g:startify_skiplist	/store/config/vimrc	/^let g:startify_skiplist = [$/;"	v	language:Vim
g:startify_update_oldfiles	/store/config/vimrc	/^let g:startify_update_oldfiles        = 1$/;"	v	language:Vim
g:tfold	/store/config/vimrc	/^let g:tfold = 0$/;"	v	language:Vim
g:thex	/store/config/vimrc	/^let g:thex = 0$/;"	v	language:Vim
g:tindent	/store/config/vimrc	/^let g:tindent = 0$/;"	v	language:Vim
g:tverbose	/store/config/vimrc	/^let g:tverbose = 0$/;"	v	language:Vim
g:txxd	/store/config/vimrc	/^let g:txxd = 0$/;"	v	language:Vim
g:visualrepeat_tick	visualrepeat.vim	/^let g:visualrepeat_tick = -1$/;"	v
g:wandbox#complete_message	wandbox.vim	/^let g:wandbox#complete_message = get(g:, 'wandbox#complete_message', 'Wandbox returned no output.')$/;"	v
g:wandbox#default_compiler	wandbox.vim	/^let g:wandbox#default_compiler = get(g:, 'wandbox#default_compiler', {})$/;"	v
g:wandbox#default_extra_options	wandbox.vim	/^let g:wandbox#default_extra_options = get(g:, 'wandbox#default_extra_options', {})$/;"	v
g:wandbox#default_options	wandbox.vim	/^    let g:wandbox#default_options = {}$/;"	v
g:wandbox#disable_python_client	wandbox.vim	/^let g:wandbox#disable_python_client = get(g:, 'wandbox#disable_python_client', executable('curl') || executable('wget') ? 1 : 0)$/;"	v
g:wandbox#disable_quickfix	wandbox.vim	/^let g:wandbox#disable_quickfix = get(g:, 'wandbox#disable_quickfix', 0)$/;"	v
g:wandbox#echo_command	wandbox.vim	/^let g:wandbox#echo_command = get(g:, 'wandbox#echo_command', 'echo')$/;"	v
g:wandbox#expand_included_files	wandbox.vim	/^let g:wandbox#expand_included_files = get(g:, 'wandbox#expand_included_files', 1)$/;"	v
g:wandbox#inu_aa	wandbox.vim	/^let g:wandbox#inu_aa = get(g:, 'wandbox#inu_aa', '三へ( へ՞ਊ ՞)へ ')$/;"	v
g:wandbox#inu_serif	wandbox.vim	/^let g:wandbox#inu_serif = get(g:, 'wandbox#inu_serif', ['ﾊｯ', 'ﾊｯ'])$/;"	v
g:wandbox#open_quickfix_window	wandbox.vim	/^let g:wandbox#open_quickfix_window = get(g:, 'wandbox#open_quickfix_window', 1)$/;"	v
g:wandbox#result_indent	wandbox.vim	/^let g:wandbox#result_indent = get(g:, 'wandbox#result_indent', 2)$/;"	v
g:wandbox#updatetime	wandbox.vim	/^    let g:wandbox#updatetime =$/;"	v
g<C-]>	/store/config/vimrc	/^nnoremap g<C-]> <C-]>$/;"	m	language:Vim
g<C-]>	/store/config/vimrc	/^vnoremap g<C-]> <C-]>$/;"	m	language:Vim
gV	/store/config/vimrc	/^noremap gV `[v`]$/;"	m	language:Vim
get	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:get(url, ...)$/;"	f
get_code	wandbox.vim	/^function! s:get_code(range, range_given, ...)$/;"	f
get_hit_enter_max_length	vital/_quickrun/Vim/Message.vim	/^function! s:get_hit_enter_max_length() abort$/;"	f
get_last_status	vital/_quickrun/Process.vim	/^function! s:get_last_status() abort$/;"	f
get_last_status	vital/_wandbox_vim/Process.vim	/^function! s:get_last_status()$/;"	f
getchar	vital/_quickrun/Prelude.vim	/^function! s:getchar(...) abort$/;"	f
getchar	vital/_wandbox_vim/Prelude.vim	/^function! s:getchar(...)$/;"	f
getchar_safe	vital/_quickrun/Prelude.vim	/^function! s:getchar_safe(...) abort$/;"	f
getchar_safe	vital/_wandbox_vim/Prelude.vim	/^function! s:getchar_safe(...)$/;"	f
glob	vital/_quickrun/Prelude.vim	/^  function! s:glob(expr) abort$/;"	f
glob	vital/_wandbox_vim/Prelude.vim	/^  function! s:glob(expr)$/;"	f
globpath	vital/_quickrun/Prelude.vim	/^  function! s:globpath(path, expr) abort$/;"	f
globpath	vital/_wandbox_vim/Prelude.vim	/^function! s:globpath(path, expr)$/;"	f
group_by	vital/_quickrun/Data/List.vim	/^function! s:group_by(xs, f) abort$/;"	f
has	vital/_quickrun/Data/List.vim	/^function! s:has(list, value) abort$/;"	f
has	vital/_wandbox_vim/Data/List.vim	/^function! s:has(list, value)$/;"	f
has_common_items	vital/_quickrun/Data/List.vim	/^function! s:has_common_items(list1, list2) abort$/;"	f
has_common_items	vital/_wandbox_vim/Data/List.vim	/^function! s:has_common_items(list1, list2)$/;"	f
has_index	vital/_quickrun/Data/List.vim	/^function! s:has_index(list, index) abort$/;"	f
has_index	vital/_wandbox_vim/Data/List.vim	/^function! s:has_index(list, index)$/;"	f
has_vimproc	vital/_quickrun/Process.vim	/^function! s:has_vimproc() abort$/;"	f
has_vimproc	vital/_wandbox_vim/Process.vim	/^function! s:has_vimproc()$/;"	f
hash	vital/_quickrun/Data/String.vim	/^function! s:hash(str) abort$/;"	f
hook.init	quickrun/hook/cd.vim	/^function! s:hook.init(session) abort$/;"	f
hook.init	quickrun/hook/eval.vim	/^function! s:hook.init(session) abort$/;"	f
hook.init	quickrun/hook/output_encode.vim	/^function! s:hook.init(session) abort$/;"	f
hook.init	quickrun/hook/sweep.vim	/^function! s:hook.init(session) abort$/;"	f
hook.init	quickrun/hook/time.vim	/^function! s:hook.init(session) abort$/;"	f
hook.on_finish	quickrun/hook/time.vim	/^function! s:hook.on_finish(session, context) abort$/;"	f
hook.on_module_loaded	quickrun/hook/eval.vim	/^function! s:hook.on_module_loaded(session, context) abort$/;"	f
hook.on_module_loaded	quickrun/hook/shebang.vim	/^function! s:hook.on_module_loaded(session, context) abort$/;"	f
hook.on_normalized	quickrun/hook/wandbox.vim	/^function! s:hook.on_normalized(session, context)$/;"	f
hook.on_output	quickrun/hook/output_encode.vim	/^function! s:hook.on_output(session, context) abort$/;"	f
hook.on_ready	quickrun/hook/cd.vim	/^function! s:hook.on_ready(session, context) abort$/;"	f
hook.on_ready	quickrun/hook/sweep.vim	/^function! s:hook.on_ready(session, context) abort$/;"	f
hook.on_ready	quickrun/hook/time.vim	/^function! s:hook.on_ready(session, context) abort$/;"	f
hook.sweep	quickrun/hook/cd.vim	/^function! s:hook.sweep() abort$/;"	f
iconv	vital/_quickrun/Data/String.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
iconv	vital/_quickrun/Process.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
iconv	vital/_wandbox_vim/Process.vim	/^function! s:iconv(expr, from, to)$/;"	f
import	vital/_wandbox_vim.vim	/^function! s:import(name, ...)$/;"	f
import	vital/quickrun.vim	/^function! s:import(name, ...) abort dict$/;"	f
ingo#actions#EvaluateOrFunc	ingo/actions.vim	/^function! ingo#actions#EvaluateOrFunc( Action, ... )$/;"	f
ingo#actions#EvaluateWithVal	ingo/actions.vim	/^function! ingo#actions#EvaluateWithVal( expression, val )$/;"	f
ingo#actions#EvaluateWithValOrFunc	ingo/actions.vim	/^function! ingo#actions#EvaluateWithValOrFunc( Action, ... )$/;"	f
ingo#actions#ExecuteOrFunc	ingo/actions.vim	/^function! ingo#actions#ExecuteOrFunc( Action, ... )$/;"	f
ingo#actions#GetValExpr	ingo/actions.vim	/^function! ingo#actions#GetValExpr()$/;"	f
ingo#actions#NormalOrFunc	ingo/actions.vim	/^function! ingo#actions#NormalOrFunc( Action, ... )$/;"	f
ingo#actions#ValueOrFunc	ingo/actions.vim	/^function! ingo#actions#ValueOrFunc( Action, ... )$/;"	f
ingo#actions#iterations#ArgDo	ingo/actions/iterations.vim	/^function! ingo#actions#iterations#ArgDo( alreadyVisitedBuffers, ... )$/;"	f
ingo#actions#iterations#BufDo	ingo/actions/iterations.vim	/^function! ingo#actions#iterations#BufDo( alreadyVisitedBuffers, ... )$/;"	f
ingo#actions#iterations#TabWinDo	ingo/actions/iterations.vim	/^function! ingo#actions#iterations#TabWinDo( alreadyVisitedTabPages, alreadyVisitedBuffers, ... )$/;"	f
ingo#actions#iterations#WinDo	ingo/actions/iterations.vim	/^function! ingo#actions#iterations#WinDo( alreadyVisitedBuffers, ... )$/;"	f
ingo#actions#special#NoAutoChdir	ingo/actions/special.vim	/^function! ingo#actions#special#NoAutoChdir( ... )$/;"	f
ingo#avoidprompt#Echo	ingo/avoidprompt.vim	/^function! ingo#avoidprompt#Echo( text )$/;"	f
ingo#avoidprompt#Echo	ingo/avoidprompt.vim	/^function! ingo#avoidprompt#Echo( text )$/;"	f
ingo#avoidprompt#EchoAsSingleLine	ingo/avoidprompt.vim	/^function! ingo#avoidprompt#EchoAsSingleLine( text )$/;"	f
ingo#avoidprompt#EchoAsSingleLine	ingo/avoidprompt.vim	/^function! ingo#avoidprompt#EchoAsSingleLine( text )$/;"	f
ingo#avoidprompt#MaxLength	ingo/avoidprompt.vim	/^function! ingo#avoidprompt#MaxLength()$/;"	f
ingo#avoidprompt#MaxLength	ingo/avoidprompt.vim	/^function! ingo#avoidprompt#MaxLength()$/;"	f
ingo#avoidprompt#TranslateLineBreaks	ingo/avoidprompt.vim	/^function! ingo#avoidprompt#TranslateLineBreaks( text )$/;"	f
ingo#avoidprompt#TranslateLineBreaks	ingo/avoidprompt.vim	/^function! ingo#avoidprompt#TranslateLineBreaks( text )$/;"	f
ingo#avoidprompt#Truncate	ingo/avoidprompt.vim	/^function! ingo#avoidprompt#Truncate( text, ... )$/;"	f
ingo#avoidprompt#Truncate	ingo/avoidprompt.vim	/^function! ingo#avoidprompt#Truncate( text, ... )$/;"	f
ingo#avoidprompt#TruncateTo	ingo/avoidprompt.vim	/^function! ingo#avoidprompt#TruncateTo( text, length )$/;"	f
ingo#avoidprompt#TruncateTo	ingo/avoidprompt.vim	/^function! ingo#avoidprompt#TruncateTo( text, length )$/;"	f
ingo#buffer#ExistOtherBuffers	ingo/buffer.vim	/^function! ingo#buffer#ExistOtherBuffers( targetBufNr )$/;"	f
ingo#buffer#ExistOtherLoadedBuffers	ingo/buffer.vim	/^function! ingo#buffer#ExistOtherLoadedBuffers( targetBufNr )$/;"	f
ingo#buffer#IsBlank	ingo/buffer.vim	/^function! ingo#buffer#IsBlank( ... )$/;"	f
ingo#buffer#IsEmpty	ingo/buffer.vim	/^function! ingo#buffer#IsEmpty( ... )$/;"	f
ingo#buffer#IsEmptyVim	ingo/buffer.vim	/^function! ingo#buffer#IsEmptyVim()$/;"	f
ingo#buffer#IsPersisted	ingo/buffer.vim	/^function! ingo#buffer#IsPersisted( ... )$/;"	f
ingo#buffer#scratch#Create	ingo/buffer/scratch.vim	/^function! ingo#buffer#scratch#Create( scratchDirspec, scratchFilename, scratchIsFile, scratchCommand, windowOpenCommand )$/;"	f
ingo#buffer#scratch#GetUnusedBracketedFilename	ingo/buffer/scratch.vim	/^function! ingo#buffer#scratch#GetUnusedBracketedFilename( dirspec, baseFilename, isFile, template )$/;"	f
ingo#buffer#scratch#NextBracketedFilename	ingo/buffer/scratch.vim	/^function! ingo#buffer#scratch#NextBracketedFilename( filespec, template )$/;"	f
ingo#buffer#scratch#NextFilename	ingo/buffer/scratch.vim	/^function! ingo#buffer#scratch#NextFilename( filespec )$/;"	f
ingo#buffer#scratch#SetLocal	ingo/buffer/scratch.vim	/^function! ingo#buffer#scratch#SetLocal( isFile )$/;"	f
ingo#buffer#temp#Call	ingo/buffer/temp.vim	/^function! ingo#buffer#temp#Call( Funcref, arguments, ... )$/;"	f
ingo#buffer#temp#CallWithText	ingo/buffer/temp.vim	/^function! ingo#buffer#temp#CallWithText( text, Funcref, arguments, ... )$/;"	f
ingo#buffer#temp#Execute	ingo/buffer/temp.vim	/^function! ingo#buffer#temp#Execute( ... )$/;"	f
ingo#buffer#temp#ExecuteWithText	ingo/buffer/temp.vim	/^function! ingo#buffer#temp#ExecuteWithText( text, command, ... )$/;"	f
ingo#buffer#temprange#Call	ingo/buffer/temprange.vim	/^function! ingo#buffer#temprange#Call( lines, Funcref, arguments, ... )$/;"	f
ingo#buffer#temprange#Execute	ingo/buffer/temprange.vim	/^function! ingo#buffer#temprange#Execute( lines, command, ... )$/;"	f
ingo#buffer#visible#Call	ingo/buffer/visible.vim	/^function! ingo#buffer#visible#Call( bufnr, Funcref, arguments )$/;"	f
ingo#buffer#visible#Execute	ingo/buffer/visible.vim	/^function! ingo#buffer#visible#Execute( bufnr, command )$/;"	f
ingo#cmdargs#GetStringExpr	ingo/cmdargs.vim	/^function! ingo#cmdargs#GetStringExpr( argument )$/;"	f
ingo#cmdargs#GetStringExpr	ingo/cmdargs.vim	/^function! ingo#cmdargs#GetStringExpr( argument )$/;"	f
ingo#cmdargs#GetUnescapedExpr	ingo/cmdargs.vim	/^function! ingo#cmdargs#GetUnescapedExpr( argument )$/;"	f
ingo#cmdargs#GetUnescapedExpr	ingo/cmdargs.vim	/^function! ingo#cmdargs#GetUnescapedExpr( argument )$/;"	f
ingo#cmdargs#command#DelimiterExpr	ingo/cmdargs/command.vim	/^function! ingo#cmdargs#command#DelimiterExpr()$/;"	f
ingo#cmdargs#command#Parse	ingo/cmdargs/command.vim	/^function! ingo#cmdargs#command#Parse( commandLine, ... )$/;"	f
ingo#cmdargs#commandcommands#GetExpr	ingo/cmdargs/commandcommands.vim	/^function! ingo#cmdargs#commandcommands#GetExpr()$/;"	f
ingo#cmdargs#file#FilterEscapedFileOptionsAndCommands	ingo/cmdargs/file.vim	/^function! ingo#cmdargs#file#FilterEscapedFileOptionsAndCommands( arguments )$/;"	f
ingo#cmdargs#file#FilterFileOptionsAndCommands	ingo/cmdargs/file.vim	/^function! ingo#cmdargs#file#FilterFileOptionsAndCommands( fileglobs )$/;"	f
ingo#cmdargs#file#SplitAndUnescape	ingo/cmdargs/file.vim	/^function! ingo#cmdargs#file#SplitAndUnescape( fileArguments )$/;"	f
ingo#cmdargs#file#Unescape	ingo/cmdargs/file.vim	/^function! ingo#cmdargs#file#Unescape( fileArgument )$/;"	f
ingo#cmdargs#glob#Expand	ingo/cmdargs/glob.vim	/^function! ingo#cmdargs#glob#Expand( fileglobs, ... )$/;"	f
ingo#cmdargs#glob#ExpandSingle	ingo/cmdargs/glob.vim	/^function! ingo#cmdargs#glob#ExpandSingle( fileglob, ... )$/;"	f
ingo#cmdargs#glob#Resolve	ingo/cmdargs/glob.vim	/^function! ingo#cmdargs#glob#Resolve( fileglobs )$/;"	f
ingo#cmdargs#pattern#IsDelimited	ingo/cmdargs/pattern.vim	/^function! ingo#cmdargs#pattern#IsDelimited( arguments, ... )$/;"	f
ingo#cmdargs#pattern#Parse	ingo/cmdargs/pattern.vim	/^function! ingo#cmdargs#pattern#Parse( arguments, ... )$/;"	f
ingo#cmdargs#pattern#ParseUnescaped	ingo/cmdargs/pattern.vim	/^function! ingo#cmdargs#pattern#ParseUnescaped( arguments, ... )$/;"	f
ingo#cmdargs#pattern#ParseUnescapedWithLiteralWholeWord	ingo/cmdargs/pattern.vim	/^function! ingo#cmdargs#pattern#ParseUnescapedWithLiteralWholeWord( arguments, ... )$/;"	f
ingo#cmdargs#pattern#RawParse	ingo/cmdargs/pattern.vim	/^function! ingo#cmdargs#pattern#RawParse( arguments, returnValueOnNoMatch, ... )$/;"	f
ingo#cmdargs#pattern#Unescape	ingo/cmdargs/pattern.vim	/^function! ingo#cmdargs#pattern#Unescape( parsedArguments )$/;"	f
ingo#cmdargs#range#Parse	ingo/cmdargs/range.vim	/^function! ingo#cmdargs#range#Parse( commandLine, ... )$/;"	f
ingo#cmdargs#range#RangeExpr	ingo/cmdargs/range.vim	/^function! ingo#cmdargs#range#RangeExpr()$/;"	f
ingo#cmdargs#range#SingleRangeExpr	ingo/cmdargs/range.vim	/^function! ingo#cmdargs#range#SingleRangeExpr()$/;"	f
ingo#cmdargs#register#ParseAppendedWritableRegister	ingo/cmdargs/register.vim	/^function! ingo#cmdargs#register#ParseAppendedWritableRegister( arguments, ... )$/;"	f
ingo#cmdargs#substitute#Parse	ingo/cmdargs/substitute.vim	/^function! ingo#cmdargs#substitute#Parse( arguments, ... )$/;"	f
ingo#cmdline#showmode#OneLineTemporaryNoShowMode	ingo/cmdline/showmode.vim	/^function! ingo#cmdline#showmode#OneLineTemporaryNoShowMode()$/;"	f
ingo#cmdline#showmode#TemporaryNoShowMode	ingo/cmdline/showmode.vim	/^function! ingo#cmdline#showmode#TemporaryNoShowMode()$/;"	f
ingo#cmdrangeconverter#BufferToLineRange	ingo/cmdrangeconverter.vim	/^function! ingo#cmdrangeconverter#BufferToLineRange( cmd ) range$/;"	f
ingo#cmdrangeconverter#LineToBufferRange	ingo/cmdrangeconverter.vim	/^function! ingo#cmdrangeconverter#LineToBufferRange( cmd )$/;"	f
ingo#codec#URL#Decode	ingo/codec/URL.vim	/^function! ingo#codec#URL#Decode( text )$/;"	f
ingo#codec#URL#Decode	ingo/codec/URL.vim	/^function! ingo#codec#URL#Decode( text )$/;"	f
ingo#codec#URL#Encode	ingo/codec/URL.vim	/^function! ingo#codec#URL#Encode( text )$/;"	f
ingo#codec#URL#Encode	ingo/codec/URL.vim	/^function! ingo#codec#URL#Encode( text )$/;"	f
ingo#codec#URL#FilespecEncode	ingo/codec/URL.vim	/^function! ingo#codec#URL#FilespecEncode( text )$/;"	f
ingo#codec#URL#FilespecEncode	ingo/codec/URL.vim	/^function! ingo#codec#URL#FilespecEncode( text )$/;"	f
ingo#collections#Flatten	ingo/collections.vim	/^function! ingo#collections#Flatten( list )$/;"	f
ingo#collections#Flatten1	ingo/collections.vim	/^function! ingo#collections#Flatten1( list )$/;"	f
ingo#collections#Partition	ingo/collections.vim	/^function! ingo#collections#Partition( list, Predicate )$/;"	f
ingo#collections#Reduce	ingo/collections.vim	/^function! ingo#collections#Reduce( list, Callback, initialValue )$/;"	f
ingo#collections#SplitKeepSeparators	ingo/collections.vim	/^function! ingo#collections#SplitKeepSeparators( expr, pattern, ... )$/;"	f
ingo#collections#ToDict	ingo/collections.vim	/^function! ingo#collections#ToDict( list, ... )$/;"	f
ingo#collections#Unique	ingo/collections.vim	/^function! ingo#collections#Unique( list, ... )$/;"	f
ingo#collections#UniqueSorted	ingo/collections.vim	/^function! ingo#collections#UniqueSorted( list )$/;"	f
ingo#collections#UniqueStable	ingo/collections.vim	/^function! ingo#collections#UniqueStable( list, ... )$/;"	f
ingo#collections#differences#ContainsLoosely	ingo/collections/differences.vim	/^function! ingo#collections#differences#ContainsLoosely( list1, list2 )$/;"	f
ingo#collections#differences#ContainsStrictly	ingo/collections/differences.vim	/^function! ingo#collections#differences#ContainsStrictly( list1, list2 )$/;"	f
ingo#collections#differences#Get	ingo/collections/differences.vim	/^function! ingo#collections#differences#Get( list1, list2 )$/;"	f
ingo#collections#isort	ingo/collections.vim	/^function! ingo#collections#isort( i1, i2 )$/;"	f
ingo#collections#mapsort	ingo/collections.vim	/^function! ingo#collections#mapsort( string, i1, i2 )$/;"	f
ingo#collections#memoized#Mapsort	ingo/collections/memoized.vim	/^function! ingo#collections#memoized#Mapsort( string, i1, i2, ... )$/;"	f
ingo#collections#numsort	ingo/collections.vim	/^function! ingo#collections#numsort( i1, i2, ... )$/;"	f
ingo#collections#permute#Shuffle	ingo/collections/permute.vim	/^function! ingo#collections#permute#Shuffle( list, Rand )$/;"	f
ingo#collections#rotate#Left	ingo/collections/rotate.vim	/^function! ingo#collections#rotate#Left( list )$/;"	f
ingo#collections#rotate#Right	ingo/collections/rotate.vim	/^function! ingo#collections#rotate#Right( list )$/;"	f
ingo#collections#unique#Add	ingo/collections/unique.vim	/^function! ingo#collections#unique#Add( list, expr )$/;"	f
ingo#collections#unique#AddNew	ingo/collections/unique.vim	/^function! ingo#collections#unique#AddNew( list, expr )$/;"	f
ingo#collections#unique#ExtendWithNew	ingo/collections/unique.vim	/^function! ingo#collections#unique#ExtendWithNew( expr1, expr2, ... )$/;"	f
ingo#collections#unique#Insert	ingo/collections/unique.vim	/^function! ingo#collections#unique#Insert( list, expr, ... )$/;"	f
ingo#collections#unique#InsertNew	ingo/collections/unique.vim	/^function! ingo#collections#unique#InsertNew( list, expr, ... )$/;"	f
ingo#collections#unique#MakeUnique	ingo/collections/unique.vim	/^function! ingo#collections#unique#MakeUnique( memory, expr )$/;"	f
ingo#comments#CheckComment	ingo/comments.vim	/^function! ingo#comments#CheckComment( text, ... )$/;"	f
ingo#comments#GetCommentPrefixType	ingo/comments.vim	/^function! ingo#comments#GetCommentPrefixType( prefix )$/;"	f
ingo#comments#GetThreePieceIndent	ingo/comments.vim	/^function! ingo#comments#GetThreePieceIndent( prefix )$/;"	f
ingo#comments#RemoveCommentPrefix	ingo/comments.vim	/^function! ingo#comments#RemoveCommentPrefix( text, checkComment )$/;"	f
ingo#comments#RenderComment	ingo/comments.vim	/^function! ingo#comments#RenderComment( text, checkComment )$/;"	f
ingo#compat#abs	ingo/compat.vim	/^    function! ingo#compat#abs( expr )$/;"	f
ingo#compat#complete#FileType	ingo/compat/complete.vim	/^function! ingo#compat#complete#FileType( ArgLead, CmdLine, CursorPos )$/;"	f
ingo#compat#fnameescape	ingo/compat.vim	/^function! ingo#compat#fnameescape( filespec )$/;"	f
ingo#compat#glob	ingo/compat.vim	/^    function! ingo#compat#glob( ... )$/;"	f
ingo#compat#globpath	ingo/compat.vim	/^    function! ingo#compat#globpath( ... )$/;"	f
ingo#compat#maparg	ingo/compat.vim	/^    function! ingo#compat#maparg( name, ... )$/;"	f
ingo#compat#regexp#GetOldEnginePrefix	ingo/compat/regexp.vim	/^    function! ingo#compat#regexp#GetOldEnginePrefix()$/;"	f
ingo#compat#setpos	ingo/compat.vim	/^    function! ingo#compat#setpos( expr, list )$/;"	f
ingo#compat#sha256	ingo/compat.vim	/^    function! ingo#compat#sha256( string )$/;"	f
ingo#compat#shellcommand#escape	ingo/compat/shellcommand.vim	/^function! ingo#compat#shellcommand#escape( command )$/;"	f
ingo#compat#shellescape	ingo/compat.vim	/^function! ingo#compat#shellescape( filespec, ... )$/;"	f
ingo#compat#shiftwidth	ingo/compat.vim	/^    function! ingo#compat#shiftwidth()$/;"	f
ingo#compat#strcharpart	ingo/compat.vim	/^    function! ingo#compat#strcharpart( ... )$/;"	f
ingo#compat#strcharpart	ingo/compat.vim	/^    function! ingo#compat#strcharpart( src, start, ... )$/;"	f
ingo#compat#strchars	ingo/compat.vim	/^	function! ingo#compat#strchars( ... )$/;"	f
ingo#compat#strchars	ingo/compat.vim	/^	function! ingo#compat#strchars( expr, ... )$/;"	f
ingo#compat#strchars	ingo/compat.vim	/^    function! ingo#compat#strchars( expr, ... )$/;"	f
ingo#compat#strdisplaywidth	ingo/compat.vim	/^    function! ingo#compat#strdisplaywidth( expr, ... )$/;"	f
ingo#compat#strgetchar	ingo/compat.vim	/^    function! ingo#compat#strgetchar( expr, index )$/;"	f
ingo#compat#uniq	ingo/compat.vim	/^    function! ingo#compat#uniq( list )$/;"	f
ingo#cursor#IsAtEndOfLine	ingo/cursor.vim	/^function! ingo#cursor#IsAtEndOfLine( ... )$/;"	f
ingo#cursor#IsAtEndOfLine	ingo/cursor.vim	/^function! ingo#cursor#IsAtEndOfLine( ... )$/;"	f
ingo#cursor#Set	ingo/cursor.vim	/^function! ingo#cursor#Set( lnum, virtcol )$/;"	f
ingo#cursor#Set	ingo/cursor.vim	/^function! ingo#cursor#Set( lnum, virtcol )$/;"	f
ingo#cursor#move#Left	ingo/cursor/move.vim	/^function! ingo#cursor#move#Left( ... )$/;"	f
ingo#cursor#move#Move	ingo/cursor/move.vim	/^function! ingo#cursor#move#Move( movement )$/;"	f
ingo#cursor#move#Right	ingo/cursor/move.vim	/^function! ingo#cursor#move#Right( ... )$/;"	f
ingo#date#HumanReltime	ingo/date.vim	/^function! ingo#date#HumanReltime( timeElapsed, ... )$/;"	f
ingo#date#HumanReltime	ingo/date.vim	/^function! ingo#date#HumanReltime( timeElapsed, ... )$/;"	f
ingo#date#epoch#ConvertTo	ingo/date/epoch.vim	/^function! ingo#date#epoch#ConvertTo( date )$/;"	f
ingo#date#format#International	ingo/date/format.vim	/^function! ingo#date#format#International( ... )$/;"	f
ingo#date#format#InternetTimestamp	ingo/date/format.vim	/^function! ingo#date#format#InternetTimestamp( ... )$/;"	f
ingo#date#format#Preferred	ingo/date/format.vim	/^function! ingo#date#format#Preferred( ... )$/;"	f
ingo#date#format#Sortable	ingo/date/format.vim	/^function! ingo#date#format#Sortable( ... )$/;"	f
ingo#date#format#SortableNumeric	ingo/date/format.vim	/^function! ingo#date#format#SortableNumeric( ... )$/;"	f
ingo#dict#AddMirrored	ingo/dict.vim	/^function! ingo#dict#AddMirrored( dict, ... )$/;"	f
ingo#dict#FromItems	ingo/dict.vim	/^function! ingo#dict#FromItems( items, ... )$/;"	f
ingo#dict#FromKeys	ingo/dict.vim	/^function! ingo#dict#FromKeys( keys, defaultValue )$/;"	f
ingo#dict#Mirror	ingo/dict.vim	/^function! ingo#dict#Mirror( dict, ... )$/;"	f
ingo#dict#find#FirstKey	ingo/dict/find.vim	/^function! ingo#dict#find#FirstKey( dict, value, ... )$/;"	f
ingo#dict#find#Keys	ingo/dict/find.vim	/^function! ingo#dict#find#Keys( dict, value, ... )$/;"	f
ingo#encoding#GetFileEncoding	ingo/encoding.vim	/^function! ingo#encoding#GetFileEncoding()$/;"	f
ingo#err#Clear	ingo/err.vim	/^function! ingo#err#Clear()$/;"	f
ingo#err#Get	ingo/err.vim	/^function! ingo#err#Get()$/;"	f
ingo#err#IsSet	ingo/err.vim	/^function! ingo#err#IsSet()$/;"	f
ingo#err#Set	ingo/err.vim	/^function! ingo#err#Set( errmsg )$/;"	f
ingo#err#SetCustomException	ingo/err.vim	/^function! ingo#err#SetCustomException( customPrefixPattern )$/;"	f
ingo#err#SetVimException	ingo/err.vim	/^function! ingo#err#SetVimException()$/;"	f
ingo#escape#Unescape	ingo/escape.vim	/^function! ingo#escape#Unescape( string, chars )$/;"	f
ingo#escape#Unescape	ingo/escape.vim	/^function! ingo#escape#Unescape( string, chars )$/;"	f
ingo#escape#UnescapeExpr	ingo/escape.vim	/^function! ingo#escape#UnescapeExpr( string, expr )$/;"	f
ingo#escape#UnescapeExpr	ingo/escape.vim	/^function! ingo#escape#UnescapeExpr( string, expr )$/;"	f
ingo#escape#command#mapescape	ingo/escape/command.vim	/^function! ingo#escape#command#mapescape( command )$/;"	f
ingo#escape#command#mapunescape	ingo/escape/command.vim	/^function! ingo#escape#command#mapunescape( command )$/;"	f
ingo#escape#file#autocmdescape	ingo/escape/file.vim	/^function! ingo#escape#file#autocmdescape( filespec )$/;"	f
ingo#escape#file#bufnameescape	ingo/escape/file.vim	/^function! ingo#escape#file#bufnameescape( filespec, ... )$/;"	f
ingo#escape#file#fnameunescape	ingo/escape/file.vim	/^function! ingo#escape#file#fnameunescape( exfilespec, ... )$/;"	f
ingo#escape#file#wildcardescape	ingo/escape/file.vim	/^function! ingo#escape#file#wildcardescape( filespec )$/;"	f
ingo#escape#shellcommand#exescape	ingo/escape/shellcommand.vim	/^function! ingo#escape#shellcommand#exescape( command )$/;"	f
ingo#event#Trigger	ingo/event.vim	/^function! ingo#event#Trigger( arguments )$/;"	f
ingo#event#TriggerCustom	ingo/event.vim	/^function! ingo#event#TriggerCustom( eventName )$/;"	f
ingo#external#LaunchGvim	ingo/external.vim	/^function! ingo#external#LaunchGvim( commands, ... )$/;"	f
ingo#external#LaunchGvim	ingo/external.vim	/^function! ingo#external#LaunchGvim( commands, ... )$/;"	f
ingo#filetype#Is	ingo/filetype.vim	/^function! ingo#filetype#Is( filetypes )$/;"	f
ingo#filetype#Is	ingo/filetype.vim	/^function! ingo#filetype#Is( filetypes )$/;"	f
ingo#filetype#IsPrimary	ingo/filetype.vim	/^function! ingo#filetype#IsPrimary( filetypes )$/;"	f
ingo#filetype#IsPrimary	ingo/filetype.vim	/^function! ingo#filetype#IsPrimary( filetypes )$/;"	f
ingo#folds#FoldedLines	ingo/folds.vim	/^function! ingo#folds#FoldedLines( startLine, endLine )$/;"	f
ingo#folds#FoldedLines	ingo/folds.vim	/^function! ingo#folds#FoldedLines( startLine, endLine )$/;"	f
ingo#folds#GetClosedFolds	ingo/folds.vim	/^function! ingo#folds#GetClosedFolds( startLnum, endLnum )$/;"	f
ingo#folds#GetClosedFolds	ingo/folds.vim	/^function! ingo#folds#GetClosedFolds( startLnum, endLnum )$/;"	f
ingo#folds#NextVisibleLine	ingo/folds.vim	/^function! ingo#folds#NextVisibleLine( lnum, direction )$/;"	f
ingo#folds#NextVisibleLine	ingo/folds.vim	/^function! ingo#folds#NextVisibleLine( lnum, direction )$/;"	f
ingo#folds#RelativeWindowLine	ingo/folds.vim	/^function! ingo#folds#RelativeWindowLine( lnum, count, direction, ... )$/;"	f
ingo#folds#RelativeWindowLine	ingo/folds.vim	/^function! ingo#folds#RelativeWindowLine( lnum, count, direction, ... )$/;"	f
ingo#folds#persistence#RestoreManualFolds	ingo/folds/persistence.vim	/^function! ingo#folds#persistence#RestoreManualFolds( handle )$/;"	f
ingo#folds#persistence#SaveManualFolds	ingo/folds/persistence.vim	/^function! ingo#folds#persistence#SaveManualFolds()$/;"	f
ingo#foldtext#DefaultPrefix	ingo/foldtext.vim	/^function! ingo#foldtext#DefaultPrefix( text )$/;"	f
ingo#format#Format	ingo/format.vim	/^function! ingo#format#Format( fmt, ... )$/;"	f
ingo#format#columns#Distribute	ingo/format/columns.vim	/^function! ingo#format#columns#Distribute( strings, ... )$/;"	f
ingo#fs#path#Combine	ingo/fs/path.vim	/^function! ingo#fs#path#Combine( first, ... )$/;"	f
ingo#fs#path#Equals	ingo/fs/path.vim	/^function! ingo#fs#path#Equals( p1, p2 )$/;"	f
ingo#fs#path#Exists	ingo/fs/path.vim	/^function! ingo#fs#path#Exists( filespec )$/;"	f
ingo#fs#path#GetRootDir	ingo/fs/path.vim	/^function! ingo#fs#path#GetRootDir( filespec )$/;"	f
ingo#fs#path#IsCaseInsensitive	ingo/fs/path.vim	/^function! ingo#fs#path#IsCaseInsensitive( ... )$/;"	f
ingo#fs#path#IsUncPathRoot	ingo/fs/path.vim	/^function! ingo#fs#path#IsUncPathRoot( filespec )$/;"	f
ingo#fs#path#Normalize	ingo/fs/path.vim	/^function! ingo#fs#path#Normalize( filespec, ... )$/;"	f
ingo#fs#path#Separator	ingo/fs/path.vim	/^function! ingo#fs#path#Separator()$/;"	f
ingo#fs#path#split#AtBasePath	ingo/fs/path/split.vim	/^function! ingo#fs#path#split#AtBasePath( filespec, basePath )$/;"	f
ingo#fs#path#split#Contains	ingo/fs/path/split.vim	/^function! ingo#fs#path#split#Contains( filespec, fragment )$/;"	f
ingo#fs#tempfile#Make	ingo/fs/tempfile.vim	/^function! ingo#fs#tempfile#Make( filename, ... )$/;"	f
ingo#fs#traversal#FindDirUpwards	ingo/fs/traversal.vim	/^function! ingo#fs#traversal#FindDirUpwards( Predicate, ... )$/;"	f
ingo#fs#traversal#FindLastContainedInUpDir	ingo/fs/traversal.vim	/^function! ingo#fs#traversal#FindLastContainedInUpDir( expr, ... )$/;"	f
ingo#ftplugin#onbufwinenter#Execute	ingo/ftplugin/onbufwinenter.vim	/^function! ingo#ftplugin#onbufwinenter#Execute( command, ... )$/;"	f
ingo#ftplugin#onbufwinenter#Execute	ingo/ftplugin/onbufwinenter.vim	/^function! ingo#ftplugin#onbufwinenter#Execute( command, ... )$/;"	f
ingo#ftplugin#windowsettings#Undo	ingo/ftplugin/windowsettings.vim	/^function! ingo#ftplugin#windowsettings#Undo( windowSettings )$/;"	f
ingo#ftplugin#windowsettings#Undo	ingo/ftplugin/windowsettings.vim	/^function! ingo#ftplugin#windowsettings#Undo( windowSettings )$/;"	f
ingo#funcref#ToString	ingo/funcref.vim	/^function! ingo#funcref#ToString( Funcref )$/;"	f
ingo#gui#position#Get	ingo/gui/position.vim	/^function! ingo#gui#position#Get()$/;"	f
ingo#join#FoldedLines	ingo/join.vim	/^function! ingo#join#FoldedLines( isKeepSpace, startLnum, endLnum, separator )$/;"	f
ingo#join#Lines	ingo/join.vim	/^function! ingo#join#Lines( lnum, isKeepSpace, separator )$/;"	f
ingo#join#Ranges	ingo/join.vim	/^function! ingo#join#Ranges( isKeepSpace, startLnum, endLnum, separator, ranges )$/;"	f
ingo#lines#PutBefore	ingo/lines.vim	/^function! ingo#lines#PutBefore( lnum, lines )$/;"	f
ingo#lines#PutWrapper	ingo/lines.vim	/^function! ingo#lines#PutWrapper( lnum, putCommand, lines )$/;"	f
ingo#lines#Replace	ingo/lines.vim	/^function! ingo#lines#Replace( startLnum, endLnum, lines, ... )$/;"	f
ingo#list#AddOrExtend	ingo/list.vim	/^function! ingo#list#AddOrExtend( list, val, ... )$/;"	f
ingo#list#Make	ingo/list.vim	/^function! ingo#list#Make( val, ... )$/;"	f
ingo#list#Zip	ingo/list.vim	/^function! ingo#list#Zip( ... )$/;"	f
ingo#list#ZipLongest	ingo/list.vim	/^function! ingo#list#ZipLongest( defaultValue, ... )$/;"	f
ingo#mapmaker#OperatorMappingForRangeCommand	ingo/mapmaker.vim	/^function! ingo#mapmaker#OperatorMappingForRangeCommand( mapArgs, mapKeys, rangeCommand )$/;"	f
ingo#matches#CountMatches	ingo/matches.vim	/^function! ingo#matches#CountMatches( text, pattern )$/;"	f
ingo#mbyte#virtcol#GetVirtColOfCurrentCharacter	ingo/mbyte/virtcol.vim	/^function! ingo#mbyte#virtcol#GetVirtColOfCurrentCharacter( lineNum, column )$/;"	f
ingo#mbyte#virtcol#GetVirtColOfNextCharacter	ingo/mbyte/virtcol.vim	/^function! ingo#mbyte#virtcol#GetVirtColOfNextCharacter( lineNum, column )$/;"	f
ingo#mbyte#virtcol#GetVirtStartColOfCurrentCharacter	ingo/mbyte/virtcol.vim	/^function! ingo#mbyte#virtcol#GetVirtStartColOfCurrentCharacter( lineNum, column )$/;"	f
ingo#motion#boundary#FirstArgument	ingo/motion/boundary.vim	/^function! ingo#motion#boundary#FirstArgument( count )$/;"	f
ingo#motion#boundary#FirstChange	ingo/motion/boundary.vim	/^function! ingo#motion#boundary#FirstChange( count )$/;"	f
ingo#motion#boundary#FirstMisspelling	ingo/motion/boundary.vim	/^function! ingo#motion#boundary#FirstMisspelling( count )$/;"	f
ingo#motion#boundary#LastArgument	ingo/motion/boundary.vim	/^function! ingo#motion#boundary#LastArgument( count )$/;"	f
ingo#motion#boundary#LastChange	ingo/motion/boundary.vim	/^function! ingo#motion#boundary#LastChange( count )$/;"	f
ingo#motion#boundary#LastLocationList	ingo/motion/boundary.vim	/^function! ingo#motion#boundary#LastLocationList( count )$/;"	f
ingo#motion#boundary#LastMisspelling	ingo/motion/boundary.vim	/^function! ingo#motion#boundary#LastMisspelling( count )$/;"	f
ingo#motion#boundary#LastQuickfix	ingo/motion/boundary.vim	/^function! ingo#motion#boundary#LastQuickfix( count )$/;"	f
ingo#motion#helper#AdditionalMovement	ingo/motion/helper.vim	/^function! ingo#motion#helper#AdditionalMovement( ... )$/;"	f
ingo#motion#omap#repeat	ingo/motion/omap.vim	/^function! ingo#motion#omap#repeat( repeatMapping, operator, count )$/;"	f
ingo#msg#CustomExceptionMsg	ingo/msg.vim	/^function! ingo#msg#CustomExceptionMsg( customPrefixPattern )$/;"	f
ingo#msg#ErrorMsg	ingo/msg.vim	/^function! ingo#msg#ErrorMsg( text, ... )$/;"	f
ingo#msg#HighlightMsg	ingo/msg.vim	/^function! ingo#msg#HighlightMsg( text, ... )$/;"	f
ingo#msg#HighlightN	ingo/msg.vim	/^function! ingo#msg#HighlightN( text, ... )$/;"	f
ingo#msg#MsgFromShellError	ingo/msg.vim	/^function! ingo#msg#MsgFromShellError( whatFailure, shellOutput )$/;"	f
ingo#msg#MsgFromVimException	ingo/msg.vim	/^function! ingo#msg#MsgFromVimException()$/;"	f
ingo#msg#ShellError	ingo/msg.vim	/^function! ingo#msg#ShellError( whatFailure, shellOutput )$/;"	f
ingo#msg#StatusMsg	ingo/msg.vim	/^function! ingo#msg#StatusMsg( text, ... )$/;"	f
ingo#msg#VerboseMsg	ingo/msg.vim	/^function! ingo#msg#VerboseMsg( text, ... )$/;"	f
ingo#msg#VimExceptionMsg	ingo/msg.vim	/^function! ingo#msg#VimExceptionMsg()$/;"	f
ingo#msg#WarningMsg	ingo/msg.vim	/^function! ingo#msg#WarningMsg( text )$/;"	f
ingo#number#DecimalStringIncrement	ingo/number.vim	/^function! ingo#number#DecimalStringIncrement( number, offset )$/;"	f
ingo#option#Contains	ingo/option.vim	/^function! ingo#option#Contains( optionValue, expr )$/;"	f
ingo#option#ContainsOneOf	ingo/option.vim	/^function! ingo#option#ContainsOneOf( optionValue, list )$/;"	f
ingo#option#Split	ingo/option.vim	/^function! ingo#option#Split( optionValue, ... )$/;"	f
ingo#option#SplitAndUnescape	ingo/option.vim	/^function! ingo#option#SplitAndUnescape( optionValue, ... )$/;"	f
ingo#os#IsCygwin	ingo/os.vim	/^function! ingo#os#IsCygwin()$/;"	f
ingo#os#IsWinOrDos	ingo/os.vim	/^function! ingo#os#IsWinOrDos()$/;"	f
ingo#os#IsWindows	ingo/os.vim	/^function! ingo#os#IsWindows()$/;"	f
ingo#os#PathSeparator	ingo/os.vim	/^function! ingo#os#PathSeparator()$/;"	f
ingo#plugin#cmdcomplete#MakeFixedListCompleteFunc	ingo/plugin/cmdcomplete.vim	/^function! ingo#plugin#cmdcomplete#MakeFixedListCompleteFunc( argumentList, ... )$/;"	f
ingo#plugin#compiler#CompilerSet	ingo/plugin/compiler.vim	/^function! ingo#plugin#compiler#CompilerSet( optionname, expr )$/;"	f
ingo#plugin#marks#Reserve	ingo/plugin/marks.vim	/^function! ingo#plugin#marks#Reserve( number, ... )$/;"	f
ingo#plugin#marks#Unreserve	ingo/plugin/marks.vim	/^function! ingo#plugin#marks#Unreserve( marksRecord )$/;"	f
ingo#plugin#setting#BooleanToStringValue	ingo/plugin/setting.vim	/^function! ingo#plugin#setting#BooleanToStringValue( settingName, ... )$/;"	f
ingo#plugin#setting#GetBufferLocal	ingo/plugin/setting.vim	/^function! ingo#plugin#setting#GetBufferLocal( variableName, ... )$/;"	f
ingo#plugin#setting#GetFromScope	ingo/plugin/setting.vim	/^function! ingo#plugin#setting#GetFromScope( variableName, scopeList, ... )$/;"	f
ingo#plugin#setting#GetScope	ingo/plugin/setting.vim	/^function! ingo#plugin#setting#GetScope( variableName, scopeList )$/;"	f
ingo#plugin#setting#GetTabLocal	ingo/plugin/setting.vim	/^function! ingo#plugin#setting#GetTabLocal( variableName, ... )$/;"	f
ingo#plugin#setting#GetWindowLocal	ingo/plugin/setting.vim	/^function! ingo#plugin#setting#GetWindowLocal( variableName, ... )$/;"	f
ingo#pos#After	ingo/pos.vim	/^function! ingo#pos#After( pos )$/;"	f
ingo#pos#Before	ingo/pos.vim	/^function! ingo#pos#Before( pos )$/;"	f
ingo#pos#IsAfter	ingo/pos.vim	/^function! ingo#pos#IsAfter( posA, posB )$/;"	f
ingo#pos#IsBefore	ingo/pos.vim	/^function! ingo#pos#IsBefore( posA, posB )$/;"	f
ingo#pos#IsInside	ingo/pos.vim	/^function! ingo#pos#IsInside( pos, start, end )$/;"	f
ingo#pos#IsInsideVisualSelection	ingo/pos.vim	/^function! ingo#pos#IsInsideVisualSelection( pos, ... )$/;"	f
ingo#pos#IsOnOrAfter	ingo/pos.vim	/^function! ingo#pos#IsOnOrAfter( posA, posB )$/;"	f
ingo#pos#IsOnOrBefore	ingo/pos.vim	/^function! ingo#pos#IsOnOrBefore( posA, posB )$/;"	f
ingo#pos#IsOutside	ingo/pos.vim	/^function! ingo#pos#IsOutside( pos, start, end )$/;"	f
ingo#print#Number	ingo/print.vim	/^function! ingo#print#Number( lnum, ... )$/;"	f
ingo#query#Confirm	ingo/query.vim	/^function! ingo#query#Confirm( msg, ... )$/;"	f
ingo#query#ConfirmAsText	ingo/query.vim	/^function! ingo#query#ConfirmAsText( msg, choices, ... )$/;"	f
ingo#query#Question	ingo/query.vim	/^function! ingo#query#Question( msg )$/;"	f
ingo#query#StripAccellerator	ingo/query.vim	/^function! ingo#query#StripAccellerator( choice )$/;"	f
ingo#query#confirm#AutoAccelerators	ingo/query/confirm.vim	/^function! ingo#query#confirm#AutoAccelerators( choices, ... )$/;"	f
ingo#query#file#Browse	ingo/query/file.vim	/^function! ingo#query#file#Browse( save, title, initdir, default, browsefilter )$/;"	f
ingo#query#file#BrowseDirForAction	ingo/query/file.vim	/^function! ingo#query#file#BrowseDirForAction( action, title, dirspec, browsefilter )$/;"	f
ingo#query#file#BrowseDirForOpenFile	ingo/query/file.vim	/^function! ingo#query#file#BrowseDirForOpenFile( title, dirspec, browsefilter )$/;"	f
ingo#query#fromlist#Query	ingo/query/fromlist.vim	/^function! ingo#query#fromlist#Query( what, list, ... )$/;"	f
ingo#query#fromlist#RenderList	ingo/query/fromlist.vim	/^function! ingo#query#fromlist#RenderList( list, defaultIndex, formatString )$/;"	f
ingo#query#get#Char	ingo/query/get.vim	/^function! ingo#query#get#Char( ... )$/;"	f
ingo#query#get#Mark	ingo/query/get.vim	/^function! ingo#query#get#Mark( ... )$/;"	f
ingo#query#get#Number	ingo/query/get.vim	/^function! ingo#query#get#Number( maxNum, ... )$/;"	f
ingo#query#get#Register	ingo/query/get.vim	/^function! ingo#query#get#Register( errorRegister, ... )$/;"	f
ingo#query#substitute#Get	ingo/query/substitute.vim	/^function! ingo#query#substitute#Get( msg )$/;"	f
ingo#range#Get	ingo/range.vim	/^function! ingo#range#Get( range )$/;"	f
ingo#range#NetEnd	ingo/range.vim	/^function! ingo#range#NetEnd( ... )$/;"	f
ingo#range#NetStart	ingo/range.vim	/^function! ingo#range#NetStart( ... )$/;"	f
ingo#range#borders#StartAndEndRange	ingo/range/borders.vim	/^function! ingo#range#borders#StartAndEndRange( startOffset, endOffset )$/;"	f
ingo#range#lines#Get	ingo/range/lines.vim	/^function! ingo#range#lines#Get( startLnum, endLnum, range, ... )$/;"	f
ingo#range#merge#Merge	ingo/range/merge.vim	/^function! ingo#range#merge#Merge( ranges )$/;"	f
ingo#record#Position	ingo/record.vim	/^function! ingo#record#Position( isRecordChange )$/;"	f
ingo#record#PositionAndLocation	ingo/record.vim	/^function! ingo#record#PositionAndLocation( isRecordChange, ... )$/;"	f
ingo#regexp#EscapeLiteralText	ingo/regexp.vim	/^function! ingo#regexp#EscapeLiteralText( text, additionalEscapeCharacters )$/;"	f
ingo#regexp#FromLiteralText	ingo/regexp.vim	/^function! ingo#regexp#FromLiteralText( text, isWholeWordSearch, additionalEscapeCharacters )$/;"	f
ingo#regexp#FromWildcard	ingo/regexp.vim	/^function! ingo#regexp#FromWildcard( wildcardExpr, additionalEscapeCharacters )$/;"	f
ingo#regexp#GetSpecialCharacters	ingo/regexp.vim	/^function! ingo#regexp#GetSpecialCharacters()$/;"	f
ingo#regexp#MakeEndWordSearch	ingo/regexp.vim	/^function! ingo#regexp#MakeEndWordSearch( text, ... )$/;"	f
ingo#regexp#MakeStartWordSearch	ingo/regexp.vim	/^function! ingo#regexp#MakeStartWordSearch( text, ... )$/;"	f
ingo#regexp#MakeWholeWordSearch	ingo/regexp.vim	/^function! ingo#regexp#MakeWholeWordSearch( text, ... )$/;"	f
ingo#regexp#collection#EscapeLiteralCharacters	ingo/regexp/collection.vim	/^function! ingo#regexp#collection#EscapeLiteralCharacters( text )$/;"	f
ingo#regexp#collection#EscapeLiteralCharacters	ingo/regexp/collection.vim	/^function! ingo#regexp#collection#EscapeLiteralCharacters( text )$/;"	f
ingo#regexp#collection#GetSpecialCharacters	ingo/regexp/collection.vim	/^function! ingo#regexp#collection#GetSpecialCharacters()$/;"	f
ingo#regexp#collection#GetSpecialCharacters	ingo/regexp/collection.vim	/^function! ingo#regexp#collection#GetSpecialCharacters()$/;"	f
ingo#regexp#collection#LiteralToRegexp	ingo/regexp/collection.vim	/^function! ingo#regexp#collection#LiteralToRegexp( text )$/;"	f
ingo#regexp#collection#LiteralToRegexp	ingo/regexp/collection.vim	/^function! ingo#regexp#collection#LiteralToRegexp( text )$/;"	f
ingo#regexp#comments#CommentToExpression	ingo/regexp/comments.vim	/^function! ingo#regexp#comments#CommentToExpression( comment )$/;"	f
ingo#regexp#comments#CommentToExpression	ingo/regexp/comments.vim	/^function! ingo#regexp#comments#CommentToExpression( comment )$/;"	f
ingo#regexp#comments#FromSetting	ingo/regexp/comments.vim	/^function! ingo#regexp#comments#FromSetting()$/;"	f
ingo#regexp#comments#FromSetting	ingo/regexp/comments.vim	/^function! ingo#regexp#comments#FromSetting()$/;"	f
ingo#regexp#fromwildcard#AnchoredToPathBoundaries	ingo/regexp/fromwildcard.vim	/^function! ingo#regexp#fromwildcard#AnchoredToPathBoundaries( ... )$/;"	f
ingo#regexp#fromwildcard#AnchoredToPathBoundaries	ingo/regexp/fromwildcard.vim	/^function! ingo#regexp#fromwildcard#AnchoredToPathBoundaries( ... )$/;"	f
ingo#regexp#fromwildcard#Convert	ingo/regexp/fromwildcard.vim	/^function! ingo#regexp#fromwildcard#Convert( ... )$/;"	f
ingo#regexp#fromwildcard#Convert	ingo/regexp/fromwildcard.vim	/^function! ingo#regexp#fromwildcard#Convert( ... )$/;"	f
ingo#regexp#fromwildcard#IsWildcardPathPattern	ingo/regexp/fromwildcard.vim	/^function! ingo#regexp#fromwildcard#IsWildcardPathPattern( expr, ... )$/;"	f
ingo#regexp#fromwildcard#IsWildcardPathPattern	ingo/regexp/fromwildcard.vim	/^function! ingo#regexp#fromwildcard#IsWildcardPathPattern( expr, ... )$/;"	f
ingo#regexp#magic#GetNormalizeMagicnessAtom	ingo/regexp/magic.vim	/^function! ingo#regexp#magic#GetNormalizeMagicnessAtom( pattern )$/;"	f
ingo#regexp#magic#GetNormalizeMagicnessAtom	ingo/regexp/magic.vim	/^function! ingo#regexp#magic#GetNormalizeMagicnessAtom( pattern )$/;"	f
ingo#regexp#magic#HasMagicAtoms	ingo/regexp/magic.vim	/^function! ingo#regexp#magic#HasMagicAtoms( pattern )$/;"	f
ingo#regexp#magic#HasMagicAtoms	ingo/regexp/magic.vim	/^function! ingo#regexp#magic#HasMagicAtoms( pattern )$/;"	f
ingo#regexp#magic#Normalize	ingo/regexp/magic.vim	/^function! ingo#regexp#magic#Normalize( pattern )$/;"	f
ingo#regexp#magic#Normalize	ingo/regexp/magic.vim	/^function! ingo#regexp#magic#Normalize( pattern )$/;"	f
ingo#regexp#pairs#MatchEnd	ingo/regexp/pairs.vim	/^function! ingo#regexp#pairs#MatchEnd( expr, startPattern, endPattern, ... )$/;"	f
ingo#regexp#pairs#MatchEnd	ingo/regexp/pairs.vim	/^function! ingo#regexp#pairs#MatchEnd( expr, startPattern, endPattern, ... )$/;"	f
ingo#regexp#previoussubstitution#Get	ingo/regexp/previoussubstitution.vim	/^function! ingo#regexp#previoussubstitution#Get()$/;"	f
ingo#regexp#virtcols#ExtractCells	ingo/regexp/virtcols.vim	/^function! ingo#regexp#virtcols#ExtractCells( virtcol, width, isAllowSmalingo#search#buffer#IsKeywordMatch	ingo/search/buffer.vim	/^function! ingo#search#buffer#IsKeywordMatch( text, startVirtCol )$/;"	f
ingo#regexp#virtcols#ExtractCells	ingo/regexp/virtcols.vim	/^function! ingo#regexp#virtcols#ExtractCells( virtcol, width, isAllowSmaller )$/;"	f
ingo#register#Default	ingo/register.vim	/^function! ingo#register#Default()$/;"	f
ingo#register#KeepRegisterExecuteOrFunc	ingo/register.vim	/^function! ingo#register#KeepRegisterExecuteOrFunc( Action, ... )$/;"	f
ingo#search#buffer#IsKeywordMatch	ingo/search/buffer.vim	/^function! ingo#search#buffer#IsKeywordMatch( text, startVirtCol )$/;"	f
ingo#search#pattern#GetLastForwardSearch	ingo/search/pattern.vim	/^function! ingo#search#pattern#GetLastForwardSearch( ... )$/;"	f
ingo#search#pattern#GetLastForwardSearch	ingo/search/pattern.vim	/^function! ingo#search#pattern#GetLastForwardSearch( ... )$/;"	f
ingo#search#timelimited#GetSearchArguments	ingo/search/timelimited.vim	/^function! ingo#search#timelimited#GetSearchArguments( timeout )$/;"	f
ingo#search#timelimited#GetSearchArguments	ingo/search/timelimited.vim	/^function! ingo#search#timelimited#GetSearchArguments( timeout )$/;"	f
ingo#search#timelimited#IsBufferContains	ingo/search/timelimited.vim	/^function! ingo#search#timelimited#IsBufferContains( pattern, ... )$/;"	f
ingo#search#timelimited#IsBufferContains	ingo/search/timelimited.vim	/^function! ingo#search#timelimited#IsBufferContains( pattern, ... )$/;"	f
ingo#search#timelimited#search	ingo/search/timelimited.vim	/^function! ingo#search#timelimited#search( pattern, flags, ... )$/;"	f
ingo#search#timelimited#search	ingo/search/timelimited.vim	/^function! ingo#search#timelimited#search( pattern, flags, ... )$/;"	f
ingo#selection#Get	ingo/selection.vim	/^function! ingo#selection#Get()$/;"	f
ingo#selection#frompattern#GetPositions	ingo/selection/frompattern.vim	/^function! ingo#selection#frompattern#GetPositions( pattern, ... )$/;"	f
ingo#selection#frompattern#Select	ingo/selection/frompattern.vim	/^function! ingo#selection#frompattern#Select( selectMode, pattern, ... )$/;"	f
ingo#selection#patternmatch#AdaptEmptySelection	ingo/selection/patternmatch.vim	/^function! ingo#selection#patternmatch#AdaptEmptySelection()$/;"	f
ingo#selection#position#Get	ingo/selection/position.vim	/^function! ingo#selection#position#Get()$/;"	f
ingo#smartcase#FromPattern	ingo/smartcase.vim	/^function! ingo#smartcase#FromPattern( pattern, ... )$/;"	f
ingo#smartcase#IsSmartCasePattern	ingo/smartcase.vim	/^function! ingo#smartcase#IsSmartCasePattern( pattern )$/;"	f
ingo#smartcase#Undo	ingo/smartcase.vim	/^function! ingo#smartcase#Undo( smartCasePattern )$/;"	f
ingo#str#Contains	ingo/str.vim	/^function! ingo#str#Contains( string, part, ...)$/;"	f
ingo#str#EndsWith	ingo/str.vim	/^function! ingo#str#EndsWith( string, substring, ... )$/;"	f
ingo#str#Equals	ingo/str.vim	/^function! ingo#str#Equals( string1, string2, ...)$/;"	f
ingo#str#GetVirtCols	ingo/str.vim	/^function! ingo#str#GetVirtCols( string, virtcol, width, isAllowSmaller )$/;"	f
ingo#str#Reverse	ingo/str.vim	/^function! ingo#str#Reverse( string )$/;"	f
ingo#str#StartsWith	ingo/str.vim	/^function! ingo#str#StartsWith( string, substring, ... )$/;"	f
ingo#str#Trim	ingo/str.vim	/^function! ingo#str#Trim( string )$/;"	f
ingo#str#frompattern#Get	ingo/str/frompattern.vim	/^function! ingo#str#frompattern#Get( text, pattern, replacement, isOnlyFirstMatch, isUnique )$/;"	f
ingo#str#frompattern#Get	ingo/str/frompattern.vim	/^function! ingo#str#frompattern#Get( text, pattern, replacement, isOnlyFirstMatch, isUnique )$/;"	f
ingo#str#join#NonEmpty	ingo/str/join.vim	/^function! ingo#str#join#NonEmpty( list, ... )$/;"	f
ingo#str#join#NonEmpty	ingo/str/join.vim	/^function! ingo#str#join#NonEmpty( list, ... )$/;"	f
ingo#str#restricted#ToShortCharacterwise	ingo/str/restricted.vim	/^function! ingo#str#restricted#ToShortCharacterwise( expr, ... )$/;"	f
ingo#str#restricted#ToShortCharacterwise	ingo/str/restricted.vim	/^function! ingo#str#restricted#ToShortCharacterwise( expr, ... )$/;"	f
ingo#str#split#First	ingo/str/split.vim	/^function! ingo#str#split#First( expr, pattern )$/;"	f
ingo#str#split#First	ingo/str/split.vim	/^function! ingo#str#split#First( expr, pattern )$/;"	f
ingo#str#trd	ingo/str.vim	/^function! ingo#str#trd( src, fromstr )$/;"	f
ingo#strdisplaywidth#GetMinMax	ingo/strdisplaywidth.vim	/^function! ingo#strdisplaywidth#GetMinMax( lines, ... )$/;"	f
ingo#strdisplaywidth#HasMoreThan	ingo/strdisplaywidth.vim	/^function! ingo#strdisplaywidth#HasMoreThan( expr, virtCol )$/;"	f
ingo#strdisplaywidth#TruncateTo	ingo/strdisplaywidth.vim	/^function! ingo#strdisplaywidth#TruncateTo( text, virtCol, ... )$/;"	f
ingo#strdisplaywidth#pad#Left	ingo/strdisplaywidth/pad.vim	/^function! ingo#strdisplaywidth#pad#Left( text, width, ... )$/;"	f
ingo#strdisplaywidth#pad#Middle	ingo/strdisplaywidth/pad.vim	/^function! ingo#strdisplaywidth#pad#Middle( text, width, ... )$/;"	f
ingo#strdisplaywidth#pad#Right	ingo/strdisplaywidth/pad.vim	/^function! ingo#strdisplaywidth#pad#Right( text, width, ... )$/;"	f
ingo#strdisplaywidth#pad#Width	ingo/strdisplaywidth/pad.vim	/^function! ingo#strdisplaywidth#pad#Width( text, width, ... )$/;"	f
ingo#strdisplaywidth#strleft	ingo/strdisplaywidth.vim	/^function! ingo#strdisplaywidth#strleft( expr, virtCol )$/;"	f
ingo#strdisplaywidth#strright	ingo/strdisplaywidth.vim	/^function! ingo#strdisplaywidth#strright( expr, virtCol )$/;"	f
ingo#subst#MultiGsub	ingo/subst.vim	/^function! ingo#subst#MultiGsub( expr, substitutions )$/;"	f
ingo#subst#expr#emulation#Substitute	ingo/subst/expr/emulation.vim	/^function! ingo#subst#expr#emulation#Substitute( expr, pat, sub, flags )$/;"	f
ingo#subst#gsub	ingo/subst.vim	/^function! ingo#subst#gsub( expr, pat, sub )$/;"	f
ingo#subst#pairs#Split	ingo/subst/pairs.vim	/^function! ingo#subst#pairs#Split( pairs, ... )$/;"	f
ingo#subst#pairs#Substitute	ingo/subst/pairs.vim	/^function! ingo#subst#pairs#Substitute( text, pairs, ... )$/;"	f
ingo#swap#GetName	ingo/swap.vim	/^function! ingo#swap#GetName( ... )$/;"	f
ingo#swap#GetName	ingo/swap.vim	/^function! ingo#swap#GetName( ... )$/;"	f
ingo#swap#GetNameImpl	ingo/swap.vim	/^function! ingo#swap#GetNameImpl()$/;"	f
ingo#swap#GetNameImpl	ingo/swap.vim	/^function! ingo#swap#GetNameImpl()$/;"	f
ingo#syntaxitem#IsOnSyntax	ingo/syntaxitem.vim	/^function! ingo#syntaxitem#IsOnSyntax( pos, syntaxItemPattern )$/;"	f
ingo#system#Chomped	ingo/system.vim	/^function! ingo#system#Chomped( ... )$/;"	f
ingo#tabstops#DisplayWidth	ingo/tabstops.vim	/^function! ingo#tabstops#DisplayWidth( column, tabstop )$/;"	f
ingo#tabstops#Render	ingo/tabstops.vim	/^function! ingo#tabstops#Render( text, ... )$/;"	f
ingo#tabstops#RenderMultiLine	ingo/tabstops.vim	/^function! ingo#tabstops#RenderMultiLine( text, ... )$/;"	f
ingo#text#Get	ingo/text.vim	/^function! ingo#text#Get( startPos, endPos, ... )$/;"	f
ingo#text#GetChar	ingo/text.vim	/^function! ingo#text#GetChar( startPos, ... )$/;"	f
ingo#text#GetCharBefore	ingo/text.vim	/^function! ingo#text#GetCharBefore( startPos, ... )$/;"	f
ingo#text#Insert	ingo/text.vim	/^function! ingo#text#Insert( pos, text )$/;"	f
ingo#text#Remove	ingo/text.vim	/^function! ingo#text#Remove( pos, len )$/;"	f
ingo#text#RemoveVirtCol	ingo/text.vim	/^function! ingo#text#RemoveVirtCol( pos, width, isAllowSmaller )$/;"	f
ingo#text#frompattern#Get	ingo/text/frompattern.vim	/^function! ingo#text#frompattern#Get( firstLine, lastLine, pattern, replacement, isOnlyFirstMatch, isUnique )$/;"	f
ingo#text#frompattern#GetAroundHere	ingo/text/frompattern.vim	/^function! ingo#text#frompattern#GetAroundHere( pattern, ... )$/;"	f
ingo#text#frompattern#GetHere	ingo/text/frompattern.vim	/^function! ingo#text#frompattern#GetHere( pattern, ... )$/;"	f
ingo#text#replace#Area	ingo/text/replace.vim	/^function! ingo#text#replace#Area( startPos, endPos, Text )$/;"	f
ingo#text#replace#PatternWithText	ingo/text/replace.vim	/^function! ingo#text#replace#PatternWithText( pattern, Text, ... )$/;"	f
ingo#text#replace#PatternWithTextAndMessage	ingo/text/replace.vim	/^function! ingo#text#replace#PatternWithTextAndMessage( what, pattern, text, ... )$/;"	f
ingo#undo#GetChangeNumber	ingo/undo.vim	/^function! ingo#undo#GetChangeNumber()$/;"	f
ingo#undo#GetChangeNumber	ingo/undo.vim	/^function! ingo#undo#GetChangeNumber()$/;"	f
ingo#units#Format	ingo/units.vim	/^function! ingo#units#Format( number, ... )$/;"	f
ingo#units#FormatBytesBinary	ingo/units.vim	/^function! ingo#units#FormatBytesBinary( number, ... )$/;"	f
ingo#units#FormatBytesDecimal	ingo/units.vim	/^function! ingo#units#FormatBytesDecimal( number, ... )$/;"	f
ingo#window#cmdwin#UndefineMappingForCmdwin	ingo/window/cmdwin.vim	/^function! ingo#window#cmdwin#UndefineMappingForCmdwin( mappings, ... )$/;"	f
ingo#window#dimensions#DisplayedLines	ingo/window/dimensions.vim	/^function! ingo#window#dimensions#DisplayedLines()$/;"	f
ingo#window#dimensions#GetNumberWidth	ingo/window/dimensions.vim	/^function! ingo#window#dimensions#GetNumberWidth( isGetAbsoluteNumberWidth )$/;"	f
ingo#window#dimensions#NetVisibleLines	ingo/window/dimensions.vim	/^function! ingo#window#dimensions#NetVisibleLines( startLine, endLine )$/;"	f
ingo#window#dimensions#NetWindowWidth	ingo/window/dimensions.vim	/^function! ingo#window#dimensions#NetWindowWidth()$/;"	f
ingo#window#dimensions#WindowDecorationColumns	ingo/window/dimensions.vim	/^function! ingo#window#dimensions#WindowDecorationColumns()$/;"	f
ingo#window#preview#GotoPreview	ingo/window/preview.vim	/^function! ingo#window#preview#GotoPreview()$/;"	f
ingo#window#preview#IsPreviewWindowVisible	ingo/window/preview.vim	/^function! ingo#window#preview#IsPreviewWindowVisible( ... )$/;"	f
ingo#window#preview#OpenBuffer	ingo/window/preview.vim	/^function! ingo#window#preview#OpenBuffer( bufnr, ... )$/;"	f
ingo#window#preview#OpenFilespec	ingo/window/preview.vim	/^function! ingo#window#preview#OpenFilespec( filespec, ... )$/;"	f
ingo#window#preview#OpenPreview	ingo/window/preview.vim	/^function! ingo#window#preview#OpenPreview( ... )$/;"	f
ingo#window#preview#SplitToPreview	ingo/window/preview.vim	/^function! ingo#window#preview#SplitToPreview( ... )$/;"	f
ingo#window#quickfix#GetList	ingo/window/quickfix.vim	/^function! ingo#window#quickfix#GetList()$/;"	f
ingo#window#quickfix#IsQuickfixList	ingo/window/quickfix.vim	/^function! ingo#window#quickfix#IsQuickfixList( ... )$/;"	f
ingo#window#quickfix#ParseFileFromQuickfixList	ingo/window/quickfix.vim	/^function! ingo#window#quickfix#ParseFileFromQuickfixList()$/;"	f
ingo#window#quickfix#SetList	ingo/window/quickfix.vim	/^function! ingo#window#quickfix#SetList( ... )$/;"	f
ingo#window#quickfix#TranslateVirtualColToByteCount	ingo/window/quickfix.vim	/^function! ingo#window#quickfix#TranslateVirtualColToByteCount( qfEntry )$/;"	f
ingo#window#special#IsSpecialWindow	ingo/window/special.vim	/^function! ingo#window#special#IsSpecialWindow( ... )$/;"	f
ingo#window#special#RestoreSpecialWindowSize	ingo/window/special.vim	/^function! ingo#window#special#RestoreSpecialWindowSize()$/;"	f
ingo#window#special#SaveSpecialWindowSize	ingo/window/special.vim	/^function! ingo#window#special#SaveSpecialWindowSize()$/;"	f
ingo#window#switches#GotoPreviousWindow	ingo/window/switches.vim	/^function! ingo#window#switches#GotoPreviousWindow( ... )$/;"	f
ingo#window#switches#WinRestoreCurrentBuffer	ingo/window/switches.vim	/^function! ingo#window#switches#WinRestoreCurrentBuffer( dict )$/;"	f
ingo#window#switches#WinSaveCurrentBuffer	ingo/window/switches.vim	/^function! ingo#window#switches#WinSaveCurrentBuffer()$/;"	f
input_helper	vital/_quickrun/Prelude.vim	/^function! s:input_helper(funcname, args) abort$/;"	f
input_helper	vital/_wandbox_vim/Prelude.vim	/^function! s:input_helper(funcname, args)$/;"	f
input_safe	vital/_quickrun/Prelude.vim	/^function! s:input_safe(...) abort$/;"	f
input_safe	vital/_wandbox_vim/Prelude.vim	/^function! s:input_safe(...)$/;"	f
intersect	vital/_quickrun/Data/List.vim	/^function! s:intersect(list1, list2) abort$/;"	f
is_absolute	vital/_quickrun/System/Filepath.vim	/^  function! s:is_absolute(path) abort$/;"	f
is_available	vital/_quickrun/ConcurrentProcess.vim	/^function! s:is_available() abort$/;"	f
is_blank	quickrun/runner/wandbox.vim	/^function! s:is_blank(dict, key)$/;"	f
is_blank	wandbox.vim	/^function! s:is_blank(dict, key)$/;"	f
is_busy	vital/_quickrun/ConcurrentProcess.vim	/^function! s:is_busy(label) abort$/;"	f
is_case_tolerant	vital/_quickrun/System/Filepath.vim	/^function! s:is_case_tolerant() abort$/;"	f
is_cmd_exe	quickrun/runner/remote.vim	/^function! s:is_cmd_exe() abort$/;"	f
is_cygwin	vital/_quickrun/Prelude.vim	/^function! s:is_cygwin() abort$/;"	f
is_cygwin	vital/_wandbox_vim/Prelude.vim	/^function! s:is_cygwin()$/;"	f
is_dict	vital/_quickrun/Prelude.vim	/^function! s:is_dict(Value) abort$/;"	f
is_dict	vital/_wandbox_vim/Prelude.vim	/^function! s:is_dict(Value)$/;"	f
is_done	vital/_quickrun/ConcurrentProcess.vim	/^function! s:is_done(label, rname) abort$/;"	f
is_empty_buffer	quickrun/outputter/buffer.vim	/^function! s:is_empty_buffer() abort$/;"	f
is_float	vital/_quickrun/Prelude.vim	/^function! s:is_float(Value) abort$/;"	f
is_float	vital/_wandbox_vim/Prelude.vim	/^function! s:is_float(Value)$/;"	f
is_funcref	vital/_quickrun/Prelude.vim	/^function! s:is_funcref(Value) abort$/;"	f
is_funcref	vital/_wandbox_vim/Prelude.vim	/^function! s:is_funcref(Value)$/;"	f
is_list	vital/_quickrun/Prelude.vim	/^function! s:is_list(Value) abort$/;"	f
is_list	vital/_wandbox_vim/Prelude.vim	/^function! s:is_list(Value)$/;"	f
is_mac	vital/_quickrun/Prelude.vim	/^function! s:is_mac() abort$/;"	f
is_mac	vital/_wandbox_vim/Prelude.vim	/^function! s:is_mac()$/;"	f
is_number	vital/_quickrun/Prelude.vim	/^function! s:is_number(Value) abort$/;"	f
is_number	vital/_wandbox_vim/Prelude.vim	/^function! s:is_number(Value)$/;"	f
is_numeric	vital/_quickrun/Prelude.vim	/^function! s:is_numeric(Value) abort$/;"	f
is_numeric	vital/_wandbox_vim/Prelude.vim	/^function! s:is_numeric(Value)$/;"	f
is_relative	vital/_quickrun/System/Filepath.vim	/^function! s:is_relative(path) abort$/;"	f
is_root_directory	vital/_quickrun/System/Filepath.vim	/^  function! s:is_root_directory(path) abort$/;"	f
is_string	vital/_quickrun/Prelude.vim	/^function! s:is_string(Value) abort$/;"	f
is_string	vital/_wandbox_vim/Prelude.vim	/^function! s:is_string(Value)$/;"	f
is_unix	vital/_quickrun/Prelude.vim	/^function! s:is_unix() abort$/;"	f
is_unix	vital/_wandbox_vim/Prelude.vim	/^function! s:is_unix()$/;"	f
is_windows	vital/_quickrun/Prelude.vim	/^function! s:is_windows() abort$/;"	f
is_windows	vital/_wandbox_vim/Prelude.vim	/^function! s:is_windows()$/;"	f
j	/store/config/vimrc	/^nnoremap <silent> <expr> j (v:count ? 'j' : 'gj')$/;"	m	language:Vim
join	vital/_quickrun/System/Filepath.vim	/^function! s:join(...) abort$/;"	f
join_posix_lines	vital/_quickrun/Data/String.vim	/^function! s:join_posix_lines(lines, ...) abort$/;"	f
jump	vital/_quickrun/Vim/ViewTracer.vim	/^function! s:jump(handle) abort$/;"	f
justify_equal_spacing	vital/_quickrun/Data/String.vim	/^function! s:justify_equal_spacing(str, width, ...) abort$/;"	f
justify_equal_spacing	vital/_wandbox_vim/Data/String.vim	/^function! s:justify_equal_spacing(str, width, ...)$/;"	f
k	/store/config/vimrc	/^nnoremap <silent> <expr> k (v:count ? 'k' : 'gk')$/;"	m	language:Vim
l:runtimeFiletypes	ingo/compat/complete.vim	/^    let l:runtimeFiletypes = filter($/;"	v
levenshtein_distance	vital/_quickrun/Data/String.vim	/^function! s:levenshtein_distance(str1, str2) abort$/;"	f
lines	vital/_quickrun/Data/String.vim	/^function! s:lines(str) abort$/;"	f
lines	vital/_wandbox_vim/Data/String.vim	/^function! s:lines(str)$/;"	f
load	vital/_wandbox_vim.vim	/^function! s:load(...) dict$/;"	f
load	vital/quickrun.vim	/^function! s:load(...) abort dict$/;"	f
log_clear	vital/_quickrun/ConcurrentProcess.vim	/^function! s:log_clear(label) abort$/;"	f
log_dump	vital/_quickrun/ConcurrentProcess.vim	/^function! s:log_dump(label) abort$/;"	f
main	/store/code/hello/hello.cc	/^int main(int argc, char **argv)$/;"	f	language:C++
make_command	quickrun/runner/remote.vim	/^function! s:make_command(runner, args) abort$/;"	f
map_accum	vital/_quickrun/Data/List.vim	/^function! s:map_accum(expr, xs, init) abort$/;"	f
max_by	vital/_quickrun/Data/List.vim	/^function! s:max_by(list, expr) abort$/;"	f
max_by	vital/_wandbox_vim/Data/List.vim	/^function! s:max_by(list, expr)$/;"	f
min_by	vital/_quickrun/Data/List.vim	/^function! s:min_by(list, expr) abort$/;"	f
min_by	vital/_wandbox_vim/Data/List.vim	/^function! s:min_by(list, expr)$/;"	f
mkdir_nothrow	vital/_quickrun/System/File.vim	/^function! s:mkdir_nothrow(...) abort$/;"	f
module.available	quickrun/module.vim	/^function! s:module.available() abort$/;"	f
module.init	quickrun/module.vim	/^function! s:module.init(session) abort$/;"	f
module.sweep	quickrun/module.vim	/^function! s:module.sweep() abort$/;"	f
module.validate	quickrun/module.vim	/^function! s:module.validate() abort$/;"	f
move	vital/_quickrun/System/File.vim	/^function! s:move(src, dest) abort$/;"	f
move_exe	vital/_quickrun/System/File.vim	/^  function! s:move_exe() abort$/;"	f
move_exe	vital/_quickrun/System/File.vim	/^  function! s:move_exe(src, dest) abort$/;"	f
move_tabwin	quickrun/hook/cd.vim	/^function! s:move_tabwin(tab, win) abort$/;"	f
move_vim	vital/_quickrun/System/File.vim	/^function! s:move_vim(src, dest) abort$/;"	f
new	vital/_wandbox_vim/OptionParser.vim	/^function! s:new()$/;"	f
new	vital/quickrun.vim	/^function! s:new(plugin_name) abort$/;"	f
normalize_fileformat	quickrun/outputter/buffer.vim	/^function! s:normalize_fileformat(crlf, lf) abort$/;"	f
nr2byte	vital/_quickrun/Data/String.vim	/^function! s:nr2byte(nr) abort$/;"	f
nr2byte	vital/_wandbox_vim/Data/String.vim	/^function! s:nr2byte(nr)$/;"	f
nr2enc_char	vital/_quickrun/Data/String.vim	/^function! s:nr2enc_char(charcode) abort$/;"	f
nr2enc_char	vital/_wandbox_vim/Data/String.vim	/^function! s:nr2enc_char(charcode)$/;"	f
nr2hex	vital/_quickrun/Data/String.vim	/^function! s:nr2hex(nr) abort$/;"	f
nr2hex	vital/_wandbox_vim/Data/String.vim	/^function! s:nr2hex(nr)$/;"	f
nsplit	vital/_quickrun/Data/String.vim	/^function! s:nsplit(expr, n, ...) abort$/;"	f
nsplit	vital/_wandbox_vim/Data/String.vim	/^function! s:nsplit(expr, n, ...)$/;"	f
of	vital/_quickrun/ConcurrentProcess.vim	/^function! s:of(command, dir, initial_queries) abort$/;"	f
open	vital/_quickrun/System/File.vim	/^function! s:open(filename) abort$/;"	f
open_browser	wandbox.vim	/^function! s:open_browser(url)$/;"	f
open_result_window	quickrun/outputter/buffer.vim	/^function! s:open_result_window(config, session) abort$/;"	f
option	wandbox/prettyprint.vim	/^function! s:option(name)$/;"	f
option	wandbox/prettyprint.vim	/^function! s:option(name)$/;"	f
or	vital/_quickrun/Data/List.vim	/^function! s:or(xs) abort$/;"	f
or	vital/_wandbox_vim/Data/List.vim	/^function! s:or(xs)$/;"	f
outputter._apply_result	quickrun/outputter/loclist.vim	/^function! s:outputter._apply_result(expr) abort$/;"	f
outputter._apply_result	quickrun/outputter/quickfix.vim	/^function! s:outputter._apply_result(expr) abort$/;"	f
outputter._close_window	quickrun/outputter/loclist.vim	/^function! s:outputter._close_window() abort$/;"	f
outputter._close_window	quickrun/outputter/quickfix.vim	/^function! s:outputter._close_window() abort$/;"	f
outputter.finish	quickrun/outputter/browser.vim	/^function! s:outputter.finish(session) abort$/;"	f
outputter.finish	quickrun/outputter/buffer.vim	/^function! s:outputter.finish(session) abort$/;"	f
outputter.finish	quickrun/outputter/buffered.vim	/^function! s:outputter.finish(session) abort$/;"	f
outputter.finish	quickrun/outputter/error.vim	/^function! s:outputter.finish(session) abort$/;"	f
outputter.finish	quickrun/outputter/file.vim	/^function! s:outputter.finish(session) abort$/;"	f
outputter.finish	quickrun/outputter/message.vim	/^function! s:outputter.finish(session) abort$/;"	f
outputter.finish	quickrun/outputter/multi.vim	/^function! s:outputter.finish(session) abort$/;"	f
outputter.finish	quickrun/outputter/quickfix.vim	/^function! s:outputter.finish(session) abort$/;"	f
outputter.finish	quickrun/outputter/variable.vim	/^function! s:outputter.finish(session) abort$/;"	f
outputter.init	quickrun/outputter/browser.vim	/^function! s:outputter.init(session) abort$/;"	f
outputter.init	quickrun/outputter/buffer.vim	/^function! s:outputter.init(session) abort$/;"	f
outputter.init	quickrun/outputter/buffered.vim	/^function! s:outputter.init(session) abort$/;"	f
outputter.init	quickrun/outputter/file.vim	/^function! s:outputter.init(session) abort$/;"	f
outputter.init	quickrun/outputter/message.vim	/^function! s:outputter.init(session) abort$/;"	f
outputter.init	quickrun/outputter/multi.vim	/^function! s:outputter.init(session) abort$/;"	f
outputter.init	quickrun/outputter/quickfix.vim	/^function! s:outputter.init(session) abort$/;"	f
outputter.init	quickrun/outputter/variable.vim	/^function! s:outputter.init(session) abort$/;"	f
outputter.output	quickrun/outputter/buffer.vim	/^function! s:outputter.output(data, session) abort$/;"	f
outputter.output	quickrun/outputter/buffered.vim	/^function! s:outputter.output(data, session) abort$/;"	f
outputter.output	quickrun/outputter/file.vim	/^function! s:outputter.output(data, session) abort$/;"	f
outputter.output	quickrun/outputter/message.vim	/^function! s:outputter.output(data, session) abort$/;"	f
outputter.output	quickrun/outputter/multi.vim	/^function! s:outputter.output(data, session) abort$/;"	f
outputter.output	quickrun/outputter/null.vim	/^function! s:outputter.output(data, session) abort$/;"	f
outputter.output	quickrun/outputter/variable.vim	/^function! s:outputter.output(data, session) abort$/;"	f
outputter.start	quickrun/outputter/buffer.vim	/^function! s:outputter.start(session) abort$/;"	f
outputter.start	quickrun/outputter/multi.vim	/^function! s:outputter.start(session) abort$/;"	f
outputter.validate	quickrun/outputter/browser.vim	/^function! s:outputter.validate() abort$/;"	f
pad_between_letters	vital/_quickrun/Data/String.vim	/^function! s:pad_between_letters(str, width, ...) abort$/;"	f
pad_between_letters	vital/_wandbox_vim/Data/String.vim	/^function! s:pad_between_letters(str, width, ...)$/;"	f
pad_both_sides	vital/_quickrun/Data/String.vim	/^function! s:pad_both_sides(str, width, ...) abort$/;"	f
pad_both_sides	vital/_wandbox_vim/Data/String.vim	/^function! s:pad_both_sides(str, width, ...)$/;"	f
pad_left	vital/_quickrun/Data/String.vim	/^function! s:pad_left(str, width, ...) abort$/;"	f
pad_left	vital/_wandbox_vim/Data/String.vim	/^function! s:pad_left(str, width, ...)$/;"	f
pad_right	vital/_quickrun/Data/String.vim	/^function! s:pad_right(str, width, ...) abort$/;"	f
pad_right	vital/_wandbox_vim/Data/String.vim	/^function! s:pad_right(str, width, ...)$/;"	f
padding_by_displaywidth	vital/_quickrun/Data/String.vim	/^function! s:padding_by_displaywidth(expr, width, float) abort$/;"	f
parseHeader	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:parseHeader(headers)$/;"	f
parse_args	wandbox.vim	/^function! s:parse_args(args)$/;"	f
partition	vital/_quickrun/Data/List.vim	/^function! s:partition(f, xs) abort$/;"	f
partition	vital/_wandbox_vim/Data/List.vim	/^function! s:partition(f, xs)$/;"	f
path2directory	vital/_quickrun/Prelude.vim	/^function! s:path2directory(path) abort$/;"	f
path2directory	vital/_wandbox_vim/Prelude.vim	/^function! s:path2directory(path)$/;"	f
path2project_directory	vital/_quickrun/Prelude.vim	/^function! s:path2project_directory(path, ...) abort$/;"	f
path2project_directory	vital/_wandbox_vim/Prelude.vim	/^function! s:path2project_directory(path, ...)$/;"	f
path_extensions	vital/_quickrun/System/Filepath.vim	/^function! s:path_extensions() abort$/;"	f
path_separator	vital/_quickrun/System/Filepath.vim	/^function! s:path_separator() abort$/;"	f
permutations	vital/_quickrun/Data/List.vim	/^function! s:permutations(list, ...) abort$/;"	f
plugin	quickrun/runner/concurrent_process.vim	/^augroup plugin-quickrun-concurrent-process$/;"	a
plugin	quickrun/runner/vimproc.vim	/^augroup plugin-quickrun-vimproc$/;"	a
plugin_name	vital/quickrun.vim	/^function! s:plugin_name() abort dict$/;"	f
polling_response	quickrun/runner/wandbox.vim	/^function! s:polling_response(key)$/;"	f
polling_response	wandbox.vim	/^function! s:polling_response()$/;"	f
pop	vital/_quickrun/Data/List.vim	/^function! s:pop(list) abort$/;"	f
pop	vital/_wandbox_vim/Data/List.vim	/^function! s:pop(list)$/;"	f
post	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:post(url, ...)$/;"	f
pp	wandbox/prettyprint.vim	/^function! s:pp(expr, shift, width, stack)$/;"	f
pp	wandbox/prettyprint.vim	/^function! s:pp(expr, shift, width, stack)$/;"	f
prepare_args	wandbox.vim	/^function! s:prepare_args(parsed, range_given)$/;"	f
prepare_to_output	wandbox.vim	/^function! s:prepare_to_output(work)$/;"	f
print_error	vital/_wandbox_vim/Prelude.vim	/^function! s:print_error(message)$/;"	f
product	vital/_quickrun/Data/List.vim	/^function! s:product(lists) abort$/;"	f
puffpuff	wandbox.vim	/^function! s:puffpuff()$/;"	f
push	vital/_quickrun/Data/List.vim	/^function! s:push(list, val) abort$/;"	f
push	vital/_wandbox_vim/Data/List.vim	/^function! s:push(list, val)$/;"	f
queue	vital/_quickrun/ConcurrentProcess.vim	/^function! s:queue(label, queries) abort$/;"	f
quickrun#hook#cd#new	quickrun/hook/cd.vim	/^function! quickrun#hook#cd#new() abort$/;"	f
quickrun#hook#eval#new	quickrun/hook/eval.vim	/^function! quickrun#hook#eval#new() abort$/;"	f
quickrun#hook#output_encode#new	quickrun/hook/output_encode.vim	/^function! quickrun#hook#output_encode#new() abort$/;"	f
quickrun#hook#shebang#new	quickrun/hook/shebang.vim	/^function! quickrun#hook#shebang#new() abort$/;"	f
quickrun#hook#sweep#new	quickrun/hook/sweep.vim	/^function! quickrun#hook#sweep#new() abort$/;"	f
quickrun#hook#time#new	quickrun/hook/time.vim	/^function! quickrun#hook#time#new() abort$/;"	f
quickrun#hook#wandbox#new	quickrun/hook/wandbox.vim	/^function! quickrun#hook#wandbox#new()$/;"	f
quickrun#module#exists	quickrun/module.vim	/^function! quickrun#module#exists(kind, name) abort$/;"	f
quickrun#module#get	quickrun/module.vim	/^function! quickrun#module#get(kind, ...) abort$/;"	f
quickrun#module#get_kinds	quickrun/module.vim	/^function! quickrun#module#get_kinds() abort$/;"	f
quickrun#module#load	quickrun/module.vim	/^function! quickrun#module#load(...) abort$/;"	f
quickrun#module#register	quickrun/module.vim	/^function! quickrun#module#register(module, ...) abort$/;"	f
quickrun#module#unregister	quickrun/module.vim	/^function! quickrun#module#unregister(...) abort$/;"	f
quickrun#outputter#browser#new	quickrun/outputter/browser.vim	/^function! quickrun#outputter#browser#new() abort$/;"	f
quickrun#outputter#buffer#new	quickrun/outputter/buffer.vim	/^function! quickrun#outputter#buffer#new() abort$/;"	f
quickrun#outputter#buffered#new	quickrun/outputter/buffered.vim	/^function! quickrun#outputter#buffered#new() abort$/;"	f
quickrun#outputter#error#new	quickrun/outputter/error.vim	/^function! quickrun#outputter#error#new() abort$/;"	f
quickrun#outputter#file#new	quickrun/outputter/file.vim	/^function! quickrun#outputter#file#new() abort$/;"	f
quickrun#outputter#loclist#new	quickrun/outputter/loclist.vim	/^function! quickrun#outputter#loclist#new() abort$/;"	f
quickrun#outputter#message#new	quickrun/outputter/message.vim	/^function! quickrun#outputter#message#new() abort$/;"	f
quickrun#outputter#multi#new	quickrun/outputter/multi.vim	/^function! quickrun#outputter#multi#new() abort$/;"	f
quickrun#outputter#null#new	quickrun/outputter/null.vim	/^function! quickrun#outputter#null#new() abort$/;"	f
quickrun#outputter#quickfix#new	quickrun/outputter/quickfix.vim	/^function! quickrun#outputter#quickfix#new() abort$/;"	f
quickrun#outputter#variable#new	quickrun/outputter/variable.vim	/^function! quickrun#outputter#variable#new() abort$/;"	f
quickrun#runner#concurrent_process#new	quickrun/runner/concurrent_process.vim	/^function! quickrun#runner#concurrent_process#new() abort$/;"	f
quickrun#runner#job#new	quickrun/runner/job.vim	/^function! quickrun#runner#job#new() abort$/;"	f
quickrun#runner#python#new	quickrun/runner/python.vim	/^function! quickrun#runner#python#new() abort$/;"	f
quickrun#runner#remote#new	quickrun/runner/remote.vim	/^function! quickrun#runner#remote#new() abort$/;"	f
quickrun#runner#shell#new	quickrun/runner/shell.vim	/^function! quickrun#runner#shell#new() abort$/;"	f
quickrun#runner#system#new	quickrun/runner/system.vim	/^function! quickrun#runner#system#new() abort$/;"	f
quickrun#runner#vimproc#new	quickrun/runner/vimproc.vim	/^function! quickrun#runner#vimproc#new() abort$/;"	f
quickrun#runner#vimscript#new	quickrun/runner/vimscript.vim	/^function! quickrun#runner#vimscript#new() abort$/;"	f
quickrun#runner#wandbox#new	quickrun/runner/wandbox.vim	/^function! quickrun#runner#wandbox#new()$/;"	f
realpath	vital/_quickrun/System/Filepath.vim	/^  function! s:realpath(path) abort$/;"	f
receive	quickrun/runner/concurrent_process.vim	/^function! s:receive(key) abort$/;"	f
receive_vimproc_result	quickrun/runner/vimproc.vim	/^function! s:receive_vimproc_result(key, read_timeout) abort$/;"	f
relpath	vital/_quickrun/System/Filepath.vim	/^function! s:relpath(path) abort$/;"	f
remove_ansi_sequences	vital/_quickrun/Data/String.vim	/^function! s:remove_ansi_sequences(text) abort$/;"	f
remove_last_separator	vital/_quickrun/System/Filepath.vim	/^function! s:remove_last_separator(path) abort$/;"	f
repair_posix_text	vital/_quickrun/Data/String.vim	/^function! s:repair_posix_text(text, ...) abort$/;"	f
repeat	repeat.vim	/^function! s:repeat(count)$/;"	f
repeat#set	repeat.vim	/^function! repeat#set(sequence,...)$/;"	f
repeatPlugin	repeat.vim	/^augroup repeatPlugin$/;"	a
replace	vital/_quickrun/Data/String.vim	/^function! s:replace(str, from, to) abort$/;"	f
replace	vital/_wandbox_vim/Data/String.vim	/^function! s:replace(str, from, to)$/;"	f
replace_cmd	quickrun/hook/shebang.vim	/^function! s:replace_cmd(cmd) abort$/;"	f
replace_first	vital/_quickrun/Data/String.vim	/^function! s:replace_first(str, from, to) abort$/;"	f
replace_first	vital/_wandbox_vim/Data/String.vim	/^function! s:replace_first(str, from, to)$/;"	f
request	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:request(...)$/;"	f
request_async	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:request_async(...)$/;"	f
resCur	/store/config/vimrc	/^augroup resCur$/;"	a	language:Vim
reverse	vital/_quickrun/Data/String.vim	/^function! s:reverse(str) abort$/;"	f
reverse	vital/_wandbox_vim/Data/String.vim	/^function! s:reverse(str)$/;"	f
rmdir	vital/_quickrun/System/File.vim	/^  function! s:rmdir(...) abort$/;"	f
rmdir	vital/_quickrun/System/File.vim	/^  function! s:rmdir(path, ...) abort$/;"	f
runner._job_cb	quickrun/runner/job.vim	/^function! s:runner._job_cb(channel, message) abort$/;"	f
runner._job_exit_cb	quickrun/runner/job.vim	/^function! s:runner._job_exit_cb(job, exit_status) abort$/;"	f
runner._timer_cb	quickrun/runner/job.vim	/^function! s:runner._timer_cb(timer) abort$/;"	f
runner.init	quickrun/runner/shell.vim	/^function! s:runner.init(session) abort$/;"	f
runner.run	quickrun/runner/concurrent_process.vim	/^function! s:runner.run(commands, input, session) abort$/;"	f
runner.run	quickrun/runner/job.vim	/^function! s:runner.run(commands, input, session) abort$/;"	f
runner.run	quickrun/runner/python.vim	/^function! s:runner.run(commands, input, session) abort$/;"	f
runner.run	quickrun/runner/remote.vim	/^function! s:runner.run(commands, input, session) abort$/;"	f
runner.run	quickrun/runner/shell.vim	/^function! s:runner.run(commands, input, session) abort$/;"	f
runner.run	quickrun/runner/system.vim	/^function! s:runner.run(commands, input, session) abort$/;"	f
runner.run	quickrun/runner/vimproc.vim	/^function! s:runner.run(commands, input, session) abort$/;"	f
runner.run	quickrun/runner/vimscript.vim	/^function! s:runner.run(commands, input, session) abort$/;"	f
runner.run	quickrun/runner/wandbox.vim	/^function! s:runner.run(commands, input, session)$/;"	f
runner.shellescape	quickrun/runner/vimproc.vim	/^function! s:runner.shellescape(str) abort$/;"	f
runner.sweep	quickrun/runner/concurrent_process.vim	/^function! s:runner.sweep() abort$/;"	f
runner.sweep	quickrun/runner/job.vim	/^function! s:runner.sweep() abort$/;"	f
runner.sweep	quickrun/runner/vimproc.vim	/^function! s:runner.sweep() abort$/;"	f
runner.sweep	quickrun/runner/wandbox.vim	/^function! s:runner.sweep()$/;"	f
runner.validate	quickrun/runner/concurrent_process.vim	/^function! s:runner.validate() abort$/;"	f
runner.validate	quickrun/runner/job.vim	/^function! s:runner.validate() abort$/;"	f
runner.validate	quickrun/runner/python.vim	/^function! s:runner.validate() abort$/;"	f
runner.validate	quickrun/runner/remote.vim	/^function! s:runner.validate() abort$/;"	f
runner.validate	quickrun/runner/vimproc.vim	/^function! s:runner.validate() abort$/;"	f
s:CP	quickrun/runner/concurrent_process.vim	/^let s:CP = g:quickrun#V.import('ConcurrentProcess')$/;"	v
s:CmdwinMappings	ingo/window/cmdwin.vim	/^let s:CmdwinMappings = {}$/;"	v
s:HTTP	wandbox.vim	/^let s:HTTP = s:V.import('Web.HTTP')$/;"	v
s:JSON	wandbox.vim	/^let s:JSON = s:V.import('Web.JSON')$/;"	v
s:List	wandbox.vim	/^let s:List = s:V.import('Data.List')$/;"	v
s:M	quickrun/runner/concurrent_process.vim	/^let s:M = g:quickrun#V.import('Vim.Message')$/;"	v
s:OptionParser	wandbox.vim	/^let s:OptionParser = s:V.import('OptionParser')$/;"	v
s:Prelude	wandbox.vim	/^let s:Prelude = s:V.import('Prelude')$/;"	v
s:Process	wandbox.vim	/^let s:Process = s:V.import('Process')$/;"	v
s:SNR	vital/quickrun.vim	/^let s:SNR = join(map(range(len("\\<SNR>")), '"[\\\\x" . printf("%0x", char2nr("\\<SNR>"[v:val])) . "]"'), '')$/;"	v
s:TYPE_DICT	vital/_quickrun/Process.vim	/^let s:TYPE_DICT = type({})$/;"	v
s:TYPE_LIST	vital/_quickrun/Process.vim	/^let s:TYPE_LIST = type([])$/;"	v
s:TYPE_STRING	vital/_quickrun/Process.vim	/^let s:TYPE_STRING = type('')$/;"	v
s:V	wandbox.vim	/^let s:V = vital#of('wandbox_vim')$/;"	v
s:VT	quickrun/outputter/buffer.vim	/^let s:VT = g:quickrun#V.import('Vim.ViewTracer')$/;"	v
s:VT	quickrun/outputter/quickfix.vim	/^let s:VT = g:quickrun#V.import('Vim.ViewTracer')$/;"	v
s:Vital	vital/quickrun.vim	/^  let s:Vital._get_module = s:_function('s:_get_builtin_module')$/;"	v
s:Vital	vital/quickrun.vim	/^  let s:Vital._get_module = s:_function('s:_get_module')$/;"	v
s:Vital	vital/quickrun.vim	/^let s:Vital = {}$/;"	v
s:Vital	vital/quickrun.vim	/^let s:Vital._import = s:_function('s:_import')$/;"	v
s:Vital	vital/quickrun.vim	/^let s:Vital.exists = s:_function('s:exists')$/;"	v
s:Vital	vital/quickrun.vim	/^let s:Vital.import = s:_function('s:import')$/;"	v
s:Vital	vital/quickrun.vim	/^let s:Vital.load = s:_function('s:load')$/;"	v
s:Vital	vital/quickrun.vim	/^let s:Vital.plugin_name = s:_function('s:plugin_name')$/;"	v
s:Vital	vital/quickrun.vim	/^let s:Vital.search = s:_function('s:search')$/;"	v
s:Vital	vital/quickrun.vim	/^let s:Vital.unload = s:_function('s:unload')$/;"	v
s:Vital	vital/quickrun.vim	/^let s:Vital.vital_files = s:_function('s:vital_files')$/;"	v
s:_DEFAULT_PARSER	vital/_wandbox_vim/OptionParser.vim	/^let s:_DEFAULT_PARSER = {'options' : {}}$/;"	v
s:_DICT_TYPE	vital/_wandbox_vim/OptionParser.vim	/^let s:_DICT_TYPE = type({})$/;"	v
s:_LIST_TYPE	vital/_wandbox_vim/OptionParser.vim	/^let s:_LIST_TYPE = type([])$/;"	v
s:_PRESET_COMPLETER	vital/_wandbox_vim/OptionParser.vim	/^let s:_PRESET_COMPLETER = {}$/;"	v
s:_STRING_TYPE	vital/_wandbox_vim/OptionParser.vim	/^let s:_STRING_TYPE = type('')$/;"	v
s:_plugin_name	vital/_quickrun.vim	/^let s:_plugin_name = expand('<sfile>:t:r')$/;"	v
s:_process_info	vital/_quickrun/ConcurrentProcess.vim	/^let s:_process_info = {}$/;"	v
s:_s	vital/quickrun.vim	/^  let s:_s = '<SNR>' . s:_SID() . '_'$/;"	v
s:_unify_path_cache	vital/quickrun.vim	/^  let s:_unify_path_cache = {}$/;"	v
s:acceleratorPattern	ingo/query/confirm.vim	/^let s:acceleratorPattern = '[[:alnum:]]'$/;"	v
s:async_works	wandbox.vim	/^let s:async_works = []$/;"	v
s:autocmdCnt	ingo/ftplugin/onbufwinenter.vim	/^let s:autocmdCnt = 0$/;"	v
s:autocmdCnt	ingo/ftplugin/onbufwinenter.vim	/^let s:autocmdCnt = 0$/;"	v
s:bufsize	quickrun/runner/vimproc.vim	/^let s:bufsize = -1$/;"	v
s:builtInCommandCommands	ingo/cmdargs/commandcommands.vim	/^let s:builtInCommandCommands = 'h\\%[elp] com\\%[mand] verb\\%[ose] debug sil\\%[ent] redi\\%[r] vert\\%[ical] lefta\\%[bove] abo\\%[veleft] rightb\\%[elow] bel\\%[owright] to\\%[pleft] bo\\%[tright] argdo bufdo tab tabd\\%[o] windo'$/;"	v
s:builtInCommandCommandsExpr	ingo/cmdargs/commandcommands.vim	/^let s:builtInCommandCommandsExpr = '\\%(' .$/;"	v
s:cache_sid	vital/quickrun.vim	/^let s:cache_sid = {}$/;"	v
s:clients	vital/_wandbox_vim/Web/HTTP.vim	/^let s:clients = {}$/;"	v
s:clients	vital/_wandbox_vim/Web/HTTP.vim	/^let s:clients.curl = {}$/;"	v
s:clients	vital/_wandbox_vim/Web/HTTP.vim	/^let s:clients.python = {}$/;"	v
s:clients	vital/_wandbox_vim/Web/HTTP.vim	/^let s:clients.wget = {}$/;"	v
s:cmdDelimiterExpr	ingo/cmdargs/command.vim	/^let s:cmdDelimiterExpr = '\\V\\C\\%(' .$/;"	v
s:completeFuncCnt	ingo/plugin/cmdcomplete.vim	/^let s:completeFuncCnt = 0$/;"	v
s:default_name	quickrun/outputter/browser.vim	/^let s:default_name = tempname() . '.html'$/;"	v
s:default_settings	vital/_wandbox_vim/Web/HTTP.vim	/^let s:default_settings = {$/;"	v
s:dict_t	quickrun/module.vim	/^let s:dict_t = type({})$/;"	v
s:errmsg	ingo/err.vim	/^let s:errmsg = ''$/;"	v
s:errorMsg	visualrepeat.vim	/^let s:errorMsg = ''$/;"	v
s:externalLaunch	ingo/external.vim	/^let s:externalLaunch = (ingo#os#IsWindows() ? 'silent !start' : 'silent !')$/;"	v
s:externalLaunch	ingo/external.vim	/^let s:externalLaunch = (ingo#os#IsWindows() ? 'silent !start' : 'silent !')$/;"	v
s:globpath_third_arg	vital/_wandbox_vim.vim	/^let s:globpath_third_arg = v:version > 702 || v:version == 702 && has('patch51')$/;"	v
s:hook	quickrun/hook/cd.vim	/^let s:hook = {$/;"	v
s:hook	quickrun/hook/eval.vim	/^let s:hook = {$/;"	v
s:hook	quickrun/hook/output_encode.vim	/^let s:hook = {$/;"	v
s:hook	quickrun/hook/shebang.vim	/^let s:hook = {}$/;"	v
s:hook	quickrun/hook/sweep.vim	/^let s:hook = {$/;"	v
s:hook	quickrun/hook/time.vim	/^let s:hook = {$/;"	v
s:hook	quickrun/hook/wandbox.vim	/^let s:hook = {$/;"	v
s:is_asynchronously_executable	wandbox.vim	/^let s:is_asynchronously_executable = s:Process.has_vimproc() && (executable('curl') || executable('wget'))$/;"	v
s:is_case_tolerant	vital/_quickrun/System/Filepath.vim	/^let s:is_case_tolerant = filereadable(expand('<sfile>:r') . '.VIM')$/;"	v
s:is_cygwin	vital/_quickrun/Prelude.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_cygwin	vital/_quickrun/System/File.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_cygwin	vital/_quickrun/System/Filepath.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_cygwin	vital/_wandbox_vim/Prelude.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_mac	vital/_quickrun/Prelude.vim	/^let s:is_mac = !s:is_windows && !s:is_cygwin$/;"	v
s:is_mac	vital/_quickrun/System/File.vim	/^let s:is_mac = !s:is_windows && !s:is_cygwin$/;"	v
s:is_mac	vital/_quickrun/System/Filepath.vim	/^let s:is_mac = !s:is_windows && !s:is_cygwin$/;"	v
s:is_mac	vital/_wandbox_vim/Prelude.vim	/^let s:is_mac = !s:is_windows && !s:is_cygwin$/;"	v
s:is_unix	vital/_quickrun/Prelude.vim	/^let s:is_unix = has('unix')$/;"	v
s:is_unix	vital/_quickrun/Process.vim	/^let s:is_unix = has('unix')$/;"	v
s:is_unix	vital/_quickrun/System/File.vim	/^let s:is_unix = has('unix')$/;"	v
s:is_unix	vital/_wandbox_vim/Prelude.vim	/^let s:is_unix = has('unix')$/;"	v
s:is_unix	vital/_wandbox_vim/Process.vim	/^let s:is_unix = has('unix')$/;"	v
s:is_vital_vim	vital/quickrun.vim	/^let s:is_vital_vim = s:plugin_name is# 'vital'$/;"	v
s:is_win	quickrun/runner/job.vim	/^let s:is_win = g:quickrun#V.Prelude.is_windows()$/;"	v
s:is_win	quickrun/runner/remote.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_windows	vital/_quickrun/Prelude.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:is_windows	vital/_quickrun/Process.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:is_windows	vital/_quickrun/System/File.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:is_windows	vital/_quickrun/System/Filepath.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:is_windows	vital/_wandbox_vim/Prelude.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:is_windows	vital/_wandbox_vim/Process.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:list_t	quickrun/module.vim	/^let s:list_t = type([])$/;"	v
s:loaded	vital/_wandbox_vim.vim	/^let s:loaded = {}$/;"	v
s:loaded	vital/quickrun.vim	/^let s:loaded = {}$/;"	v
s:magicAtomsExpr	ingo/regexp/magic.vim	/^let s:magicAtomsExpr = '\\%(\\%(^\\|[^\\\\]\\)\\%(\\\\\\\\\\)*\\\\\\)\\@<!\\\\[vmMV]'$/;"	v
s:magicAtomsExpr	ingo/regexp/magic.vim	/^let s:magicAtomsExpr = '\\%(\\%(^\\|[^\\\\]\\)\\%(\\\\\\\\\\)*\\\\\\)\\@<!\\\\[vmMV]'$/;"	v
s:memoizedI	ingo/collections/memoized.vim	/^let s:memoizedI = {}$/;"	v
s:memoizedTime	ingo/collections/memoized.vim	/^let s:memoizedTime = -1$/;"	v
s:module	quickrun/module.vim	/^let s:module = {'config': {}, 'config_order': []}$/;"	v
s:modules	quickrun/module.vim	/^let s:modules = map(copy(s:templates), '{}')$/;"	v
s:need_trans	vital/_quickrun/Process.vim	/^let s:need_trans = v:version < 704 || (v:version == 704 && !has('patch122'))$/;"	v
s:need_trans	vital/_quickrun/System/File.vim	/^let s:need_trans = v:version < 704 || (v:version == 704 && !has('patch122'))$/;"	v
s:notPathSeparatorPattern	ingo/regexp/fromwildcard.vim	/^    let s:notPathSeparatorPattern = '\\\\[^\/\\\\\\\\]'$/;"	v
s:notPathSeparatorPattern	ingo/regexp/fromwildcard.vim	/^    let s:notPathSeparatorPattern = '\\\\[^\/\\\\\\\\]'$/;"	v
s:notPathSeparatorPattern	ingo/regexp/fromwildcard.vim	/^    let s:notPathSeparatorPattern = '\\\\[^\/]'$/;"	v
s:notPathSeparatorPattern	ingo/regexp/fromwildcard.vim	/^    let s:notPathSeparatorPattern = '\\\\[^\/]'$/;"	v
s:option_parser	wandbox.vim	/^let s:option_parser = s:OptionParser.new()$/;"	v
s:outputter	quickrun/outputter/browser.vim	/^let s:outputter = quickrun#outputter#file#new()$/;"	v
s:outputter	quickrun/outputter/browser.vim	/^let s:outputter.init_file = s:outputter.init$/;"	v
s:outputter	quickrun/outputter/buffer.vim	/^let s:outputter = {$/;"	v
s:outputter	quickrun/outputter/buffered.vim	/^let s:outputter = {$/;"	v
s:outputter	quickrun/outputter/error.vim	/^let s:outputter = quickrun#outputter#buffered#new()$/;"	v
s:outputter	quickrun/outputter/error.vim	/^let s:outputter.config = {$/;"	v
s:outputter	quickrun/outputter/error.vim	/^let s:outputter.config_order = ['success', 'error']$/;"	v
s:outputter	quickrun/outputter/file.vim	/^let s:outputter = {$/;"	v
s:outputter	quickrun/outputter/loclist.vim	/^let s:outputter = quickrun#outputter#quickfix#new()$/;"	v
s:outputter	quickrun/outputter/loclist.vim	/^let s:outputter.config.open_cmd = 'lopen'$/;"	v
s:outputter	quickrun/outputter/message.vim	/^let s:outputter = {$/;"	v
s:outputter	quickrun/outputter/multi.vim	/^let s:outputter = {$/;"	v
s:outputter	quickrun/outputter/null.vim	/^let s:outputter = {}$/;"	v
s:outputter	quickrun/outputter/quickfix.vim	/^let s:outputter = quickrun#outputter#buffered#new()$/;"	v
s:outputter	quickrun/outputter/quickfix.vim	/^let s:outputter.config = {$/;"	v
s:outputter	quickrun/outputter/quickfix.vim	/^let s:outputter.init_buffered = s:outputter.init$/;"	v
s:outputter	quickrun/outputter/variable.vim	/^let s:outputter = {$/;"	v
s:pairPattern	ingo/subst/pairs.vim	/^let s:pairPattern = '\\(^[^=]\\+\\)=\\(.*$\\)'$/;"	v
s:pathSeparator	ingo/regexp/fromwildcard.vim	/^    let s:pathSeparator = '\/'$/;"	v
s:pathSeparator	ingo/regexp/fromwildcard.vim	/^    let s:pathSeparator = '\/'$/;"	v
s:pathSeparator	ingo/regexp/fromwildcard.vim	/^    let s:pathSeparator = '\\'$/;"	v
s:pathSeparator	ingo/regexp/fromwildcard.vim	/^    let s:pathSeparator = '\\'$/;"	v
s:path_sep_pattern	vital/_quickrun/System/Filepath.vim	/^let s:path_sep_pattern = (exists('+shellslash') ? '[\\\\\/]' : '\/') . '\\+'$/;"	v
s:path_separator	vital/_quickrun/System/Filepath.vim	/^let s:path_separator = s:is_windows ? ';' : ':'$/;"	v
s:plugin_name	vital/quickrun.vim	/^let s:plugin_name = expand('<sfile>:t:r')$/;"	v
s:printStringCommandTemplate	ingo/compat.vim	/^    let s:printStringCommandTemplate = (ingo#os#IsWinOrDos() ? 'echo.%s' : 'printf %%s %s')$/;"	v
s:project_root	vital/quickrun.vim	/^let s:project_root = expand('<sfile>:h:h:h')$/;"	v
s:python_loaded	quickrun/runner/python.vim	/^  let s:python_loaded = 1$/;"	v
s:python_loaded	quickrun/runner/python.vim	/^let s:python_loaded = 0$/;"	v
s:rangeExpr	ingo/cmdargs/range.vim	/^let s:rangeExpr = s:singleRangeExpr . '\\%([,;]' . s:singleRangeExpr . '\\)\\?'$/;"	v
s:runner	quickrun/runner/concurrent_process.vim	/^let s:runner = {$/;"	v
s:runner	quickrun/runner/job.vim	/^let s:runner = {$/;"	v
s:runner	quickrun/runner/python.vim	/^let s:runner = {}$/;"	v
s:runner	quickrun/runner/remote.vim	/^let s:runner = {$/;"	v
s:runner	quickrun/runner/shell.vim	/^let s:runner = {$/;"	v
s:runner	quickrun/runner/system.vim	/^let s:runner = {}$/;"	v
s:runner	quickrun/runner/vimproc.vim	/^let s:runner = {$/;"	v
s:runner	quickrun/runner/vimscript.vim	/^let s:runner = {}$/;"	v
s:runner	quickrun/runner/wandbox.vim	/^let s:runner = { 'config' : {$/;"	v
s:save_cpo	ConflictMotions.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ConflictMotions.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	CountJump/Mappings.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	CountJump/Motion.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	CountJump/TextObject.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ingo/buffer.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ingo/cmdargs/command.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ingo/cmdargs/commandcommands.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ingo/cmdargs/range.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ingo/ftplugin/windowsettings.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ingo/ftplugin/windowsettings.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ingo/motion/omap.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ingo/plugin/cmdcomplete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ingo/query.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ingo/query/confirm.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ingo/query/fromlist.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ingo/query/get.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ingo/regexp/virtcols.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ingo/regexp/virtcols.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ingo/smartcase.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ingo/str/frompattern.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ingo/str/frompattern.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ingo/tabstops.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ingo/window/preview.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/hook/cd.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/hook/eval.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/hook/output_encode.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/hook/shebang.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/hook/sweep.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/hook/time.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/hook/wandbox.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/module.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/outputter/browser.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/outputter/buffer.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/outputter/buffered.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/outputter/error.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/outputter/file.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/outputter/loclist.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/outputter/message.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/outputter/multi.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/outputter/null.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/outputter/quickfix.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/outputter/variable.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/runner/concurrent_process.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/runner/python.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/runner/remote.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/runner/shell.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/runner/system.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/runner/vimproc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/runner/vimscript.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	quickrun/runner/wandbox.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	visualrepeat.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vital/_quickrun/ConcurrentProcess.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vital/_quickrun/Data/List.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vital/_quickrun/Data/String.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vital/_quickrun/Prelude.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vital/_quickrun/Process.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vital/_quickrun/System/File.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vital/_quickrun/System/Filepath.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vital/_quickrun/Vim/Message.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vital/_quickrun/Vim/ViewTracer.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vital/_wandbox_vim/Data/List.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vital/_wandbox_vim/Data/String.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vital/_wandbox_vim/OptionParser.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vital/_wandbox_vim/Prelude.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vital/_wandbox_vim/Process.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vital/_wandbox_vim/Web/HTTP.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vital/_wandbox_vim/Web/JSON.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	wandbox.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	wandbox/prettyprint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	wandbox/prettyprint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	wandbox/quickrun.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	wandbox/quickrun.vim	/^let s:save_cpo = &cpo$/;"	v
s:self_version	vital/_wandbox_vim.vim	/^let s:self_version = expand('<sfile>:t:r')$/;"	v
s:singleRangeExpr	ingo/cmdargs/range.vim	/^let s:singleRangeExpr = '\\%(\\d*\\|[.$*%]\\|''\\S\\|\\\\[\/?&]\\|\/.\\{-}\/\\|?.\\{-}?\\)\\%([+-]\\d*\\)\\?'$/;"	v
s:specialSearchCharacterExpressions	ingo/regexp/magic.vim	/^let s:specialSearchCharacterExpressions = {$/;"	v
s:specialSearchCharacterExpressions	ingo/regexp/magic.vim	/^let s:specialSearchCharacterExpressions = {$/;"	v
s:tempBufNr	ingo/buffer/temp.vim	/^let s:tempBufNr = 0$/;"	v
s:templates	quickrun/module.vim	/^let s:templates = {}$/;"	v
s:templates	quickrun/module.vim	/^let s:templates.hook = deepcopy(s:module)$/;"	v
s:templates	quickrun/module.vim	/^let s:templates.hook.config.enable = 1$/;"	v
s:templates	quickrun/module.vim	/^let s:templates.outputter = deepcopy(s:module)$/;"	v
s:templates	quickrun/module.vim	/^let s:templates.runner = deepcopy(s:module)$/;"	v
s:virtcol	visualrepeat.vim	/^let s:virtcol = 1$/;"	v
s:vital_base_dir	vital/quickrun.vim	/^let s:vital_base_dir = expand('<sfile>:h')$/;"	v
s:wandbox_root	quickrun/hook/wandbox.vim	/^let s:wandbox_root = escape(substitute(fnamemodify(globpath(&rtp, 'plugin\/wandbox.vim'), ':p:h:h'), '\\\\', '\/', 'g'), ' ')$/;"	v
s:writableRegisterExpr	ingo/cmdargs/register.vim	/^let s:writableRegisterExpr = '\\([-a-zA-Z0-9"*+_\/]\\)'$/;"	v
scan	vital/_quickrun/Data/String.vim	/^function! s:scan(str, pattern) abort$/;"	f
scan	vital/_wandbox_vim/Data/String.vim	/^function! s:scan(str, pattern)$/;"	f
se	vital/_wandbox_vim/Web/HTTP.vim	/^function! s:_build_response(header, content)$/;"	f
search	vital/quickrun.vim	/^function! s:search(pattern) abort dict$/;"	f
separator	vital/_quickrun/System/Filepath.vim	/^function! s:separator() abort$/;"	f
set_default	vital/_quickrun/Prelude.vim	/^function! s:set_default(var, val) abort$/;"	f
set_default	vital/_wandbox_vim/Prelude.vim	/^function! s:set_default(var, val)$/;"	f
set_dictionary_helper	vital/_wandbox_vim/Prelude.vim	/^function! s:set_dictionary_helper(variable, keys, pattern)$/;"	f
set_running_mark	quickrun/outputter/buffer.vim	/^function! s:set_running_mark(mark) abort$/;"	f
shellescape	quickrun/runner/remote.vim	/^function! s:shellescape(str) abort$/;"	f
shellescape	vital/_quickrun/Process.vim	/^  function! s:shellescape(...) abort$/;"	f
shellescape	vital/_quickrun/Process.vim	/^  function! s:shellescape(command) abort$/;"	f
shellescape	vital/_wandbox_vim/Process.vim	/^  function! s:shellescape(...)$/;"	f
shellescape	vital/_wandbox_vim/Process.vim	/^  function! s:shellescape(command)$/;"	f
shift	vital/_quickrun/Data/List.vim	/^function! s:shift(list) abort$/;"	f
shift	vital/_wandbox_vim/Data/List.vim	/^function! s:shift(list)$/;"	f
shutdown	vital/_quickrun/ConcurrentProcess.vim	/^function! s:shutdown(label) abort$/;"	f
sid2sfuncs	vital/quickrun.vim	/^function! s:sid2sfuncs(sid) abort$/;"	f
smart_execute_command	vital/_quickrun/Prelude.vim	/^function! s:smart_execute_command(action, word) abort$/;"	f
smart_execute_command	vital/_wandbox_vim/Prelude.vim	/^function! s:smart_execute_command(action, word)$/;"	f
sort	vital/_quickrun/Data/List.vim	/^function! s:sort(list, expr) abort$/;"	f
sort	vital/_wandbox_vim/Data/List.vim	/^function! s:sort(list, expr)$/;"	f
sort_by	vital/_quickrun/Data/List.vim	/^function! s:sort_by(list, expr) abort$/;"	f
sort_by	vital/_wandbox_vim/Data/List.vim	/^function! s:sort_by(list, expr)$/;"	f
span	vital/_quickrun/Data/List.vim	/^function! s:span(f, xs) abort$/;"	f
span	vital/_wandbox_vim/Data/List.vim	/^function! s:span(f, xs)$/;"	f
spawn	vital/_quickrun/Process.vim	/^function! s:spawn(expr, ...) abort$/;"	f
spawn	vital/_wandbox_vim/Process.vim	/^function! s:spawn(expr, ...)$/;"	f
split	vital/_quickrun/System/Filepath.vim	/^function! s:split(path) abort$/;"	f
split3	vital/_quickrun/Data/String.vim	/^function! s:split3(expr, pattern) abort$/;"	f
split3	vital/_wandbox_vim/Data/String.vim	/^function! s:split3(expr, pattern)$/;"	f
split_by_displaywidth	vital/_quickrun/Data/String.vim	/^function! s:split_by_displaywidth(expr, width, float, is_wrap) abort$/;"	f
split_leftright	vital/_quickrun/Data/String.vim	/^function! s:split_leftright(expr, pattern) abort$/;"	f
split_leftright	vital/_wandbox_vim/Data/String.vim	/^function! s:split_leftright(expr, pattern)$/;"	f
split_posix_text	vital/_quickrun/Data/String.vim	/^function! s:split_posix_text(text, ...) abort$/;"	f
start_polling	wandbox.vim	/^function! s:start_polling()$/;"	f
starts_with	vital/_quickrun/Data/String.vim	/^function! s:starts_with(str, prefix) abort$/;"	f
strchars	vital/_quickrun/Data/String.vim	/^  function! s:strchars(str) abort$/;"	f
strchars	vital/_wandbox_vim/Data/String.vim	/^  function! s:strchars(str)$/;"	f
strwidthpart	vital/_quickrun/Data/String.vim	/^function! s:strwidthpart(str, width) abort$/;"	f
strwidthpart	vital/_quickrun/Prelude.vim	/^function! s:strwidthpart(str, width) abort$/;"	f
strwidthpart	vital/_wandbox_vim/Prelude.vim	/^function! s:strwidthpart(str, width)$/;"	f
strwidthpart_reverse	vital/_quickrun/Data/String.vim	/^function! s:strwidthpart_reverse(str, width) abort$/;"	f
strwidthpart_reverse	vital/_quickrun/Prelude.vim	/^function! s:strwidthpart_reverse(str, width) abort$/;"	f
strwidthpart_reverse	vital/_wandbox_vim/Prelude.vim	/^function! s:strwidthpart_reverse(str, width)$/;"	f
substitute_last	vital/_quickrun/Data/String.vim	/^function! s:substitute_last(expr, pat, sub) abort$/;"	f
substitute_last	vital/_wandbox_vim/Data/String.vim	/^function! s:substitute_last(expr, pat, sub)$/;"	f
substitute_path_separator	vital/_quickrun/Prelude.vim	/^function! s:substitute_path_separator(path) abort$/;"	f
substitute_path_separator	vital/_wandbox_vim/Prelude.vim	/^function! s:substitute_path_separator(path)$/;"	f
system	vital/_quickrun/Process.vim	/^function! s:system(str, ...) abort$/;"	f
system	vital/_wandbox_vim/Process.vim	/^function! s:system(str, ...)$/;"	f
tabnr	vital/_quickrun/Vim/ViewTracer.vim	/^function! s:tabnr(handle) abort$/;"	f
take_while	vital/_quickrun/Data/List.vim	/^function! s:take_while(f, xs) abort$/;"	f
take_while	vital/_wandbox_vim/Data/List.vim	/^function! s:take_while(f, xs)$/;"	f
templates.hook.priority	quickrun/module.vim	/^function! s:templates.hook.priority(point) abort$/;"	f
templates.outputter.finish	quickrun/module.vim	/^function! s:templates.outputter.finish(session) abort$/;"	f
templates.outputter.output	quickrun/module.vim	/^function! s:templates.outputter.output(data, session) abort$/;"	f
templates.outputter.start	quickrun/module.vim	/^function! s:templates.outputter.start(session) abort$/;"	f
templates.runner.run	quickrun/module.vim	/^function! s:templates.runner.run(commands, input, session) abort$/;"	f
templates.runner.shellescape	quickrun/module.vim	/^function! s:templates.runner.shellescape(str) abort$/;"	f
tick	vital/_quickrun/ConcurrentProcess.vim	/^function! s:tick(label) abort$/;"	f
trace_tabpage	vital/_quickrun/Vim/ViewTracer.vim	/^function! s:trace_tabpage(...) abort$/;"	f
trace_window	vital/_quickrun/Vim/ViewTracer.vim	/^function! s:trace_window(...) abort$/;"	f
trim	vital/_quickrun/Data/String.vim	/^function! s:trim(str) abort$/;"	f
trim	vital/_wandbox_vim/Data/String.vim	/^function! s:trim(str)$/;"	f
trim_end	vital/_quickrun/Data/String.vim	/^function! s:trim_end(str) abort$/;"	f
trim_start	vital/_quickrun/Data/String.vim	/^function! s:trim_start(str) abort$/;"	f
truncate	vital/_quickrun/Data/String.vim	/^function! s:truncate(str, width) abort$/;"	f
truncate	vital/_quickrun/Prelude.vim	/^function! s:truncate(str, width) abort$/;"	f
truncate	vital/_wandbox_vim/Prelude.vim	/^function! s:truncate(str, width)$/;"	f
truncate_skipping	vital/_quickrun/Data/String.vim	/^function! s:truncate_skipping(str, max, footer_width, separator) abort$/;"	f
truncate_skipping	vital/_quickrun/Prelude.vim	/^function! s:truncate_skipping(str, max, footer_width, separator) abort$/;"	f
truncate_skipping	vital/_wandbox_vim/Prelude.vim	/^function! s:truncate_skipping(str, max, footer_width, separator)$/;"	f
truncate_smart	vital/_wandbox_vim/Prelude.vim	/^function! s:truncate_smart(str, max, footer_width, separator)$/;"	f
u	repeat.vim	/^nnoremap <silent> u     :<C-U>call <SID>wrap('u',v:count)<CR>$/;"	m
unescape	vital/_quickrun/Data/String.vim	/^function! s:unescape(str, chars) abort$/;"	f
unescape_pattern	vital/_quickrun/Data/String.vim	/^function! s:unescape_pattern(str) abort$/;"	f
unify_separator	vital/_quickrun/System/Filepath.vim	/^function! s:unify_separator(path) abort$/;"	f
uniq	vital/_quickrun/Data/List.vim	/^function! s:uniq(list) abort$/;"	f
uniq	vital/_wandbox_vim/Data/List.vim	/^function! s:uniq(list, ...)$/;"	f
uniq_by	vital/_quickrun/Data/List.vim	/^function! s:uniq_by(list, f) abort$/;"	f
uniq_by	vital/_wandbox_vim/Data/List.vim	/^function! s:uniq_by(list, f)$/;"	f
unixpath	vital/_quickrun/System/Filepath.vim	/^function! s:unixpath(path) abort$/;"	f
unload	vital/_wandbox_vim.vim	/^function! s:unload()$/;"	f
unload	vital/quickrun.vim	/^function! s:unload() abort dict$/;"	f
unshift	vital/_quickrun/Data/List.vim	/^function! s:unshift(list, val) abort$/;"	f
unshift	vital/_wandbox_vim/Data/List.vim	/^function! s:unshift(list, val)$/;"	f
validate_module	quickrun/module.vim	/^function! s:validate_module(module) abort$/;"	f
vim,	quickrun/runner/python.vim	/^import vim, threading, subprocess, re, time$/;"	m
vimpager_use_gvim	/store/config/vimrc	/^let vimpager_use_gvim = 1$/;"	v	language:Vim
visualrepeat#CaptureVirtCol	visualrepeat.vim	/^function! visualrepeat#CaptureVirtCol()$/;"	f
visualrepeat#ErrorMsg	visualrepeat.vim	/^function! visualrepeat#ErrorMsg()$/;"	f
visualrepeat#reapply#RepeatCount	visualrepeat/reapply.vim	/^function! visualrepeat#reapply#RepeatCount()$/;"	f
visualrepeat#reapply#RepeatCount	visualrepeat/reapply.vim	/^function! visualrepeat#reapply#RepeatCount()$/;"	f
visualrepeat#reapply#VisualMode	visualrepeat/reapply.vim	/^function! visualrepeat#reapply#VisualMode( isStayInVisualMode )$/;"	f
visualrepeat#reapply#VisualMode	visualrepeat/reapply.vim	/^function! visualrepeat#reapply#VisualMode( isStayInVisualMode )$/;"	f
visualrepeat#repeat	visualrepeat.vim	/^function! visualrepeat#repeat()$/;"	f
visualrepeat#repeatOnVirtCol	visualrepeat.vim	/^function! visualrepeat#repeatOnVirtCol( virtcol, count )$/;"	f
visualrepeat#set	visualrepeat.vim	/^function! visualrepeat#set( sequence, ... )$/;"	f
visualrepeatPlugin	visualrepeat.vim	/^augroup visualrepeatPlugin$/;"	a
vital#	vital/_quickrun.vim	/^function! vital#{s:_plugin_name}#new() abort$/;"	f
vital#	vital/_wandbox_vim.vim	/^function! vital#{s:self_version}#new()$/;"	f
vital#	vital/quickrun.vim	/^function! vital#{s:plugin_name}#import(...) abort$/;"	f
vital#	vital/quickrun.vim	/^function! vital#{s:plugin_name}#of() abort$/;"	f
vital#_quickrun#ConcurrentProcess#import	vital/_quickrun/ConcurrentProcess.vim	/^  function! vital#_quickrun#ConcurrentProcess#import() abort$/;"	f
vital#_quickrun#Data#List#import	vital/_quickrun/Data/List.vim	/^  function! vital#_quickrun#Data#List#import() abort$/;"	f
vital#_quickrun#Data#String#import	vital/_quickrun/Data/String.vim	/^  function! vital#_quickrun#Data#String#import() abort$/;"	f
vital#_quickrun#Prelude#import	vital/_quickrun/Prelude.vim	/^  function! vital#_quickrun#Prelude#import() abort$/;"	f
vital#_quickrun#Process#import	vital/_quickrun/Process.vim	/^  function! vital#_quickrun#Process#import() abort$/;"	f
vital#_quickrun#System#File#import	vital/_quickrun/System/File.vim	/^  function! vital#_quickrun#System#File#import() abort$/;"	f
vital#_quickrun#System#Filepath#import	vital/_quickrun/System/Filepath.vim	/^  function! vital#_quickrun#System#Filepath#import() abort$/;"	f
vital#_quickrun#Vim#Message#import	vital/_quickrun/Vim/Message.vim	/^  function! vital#_quickrun#Vim#Message#import() abort$/;"	f
vital#_quickrun#Vim#ViewTracer#import	vital/_quickrun/Vim/ViewTracer.vim	/^  function! vital#_quickrun#Vim#ViewTracer#import() abort$/;"	f
vital#of	vital.vim	/^function! vital#of(name)$/;"	f
vital_files	vital/quickrun.vim	/^function! s:vital_files() abort$/;"	f
w!!	/store/config/vimrc	/^cnoremap w!! silent w !sudo dd of=%$/;"	m	language:Vim
wandbox	quickrun/runner/wandbox.vim	/^augroup wandbox-quickrun-polling$/;"	a
wandbox	wandbox.vim	/^augroup wandbox-polling-response$/;"	a
wandbox#_dump_compile_results_for_autocmd_workaround	wandbox.vim	/^function! wandbox#_dump_compile_results_for_autocmd_workaround()$/;"	f
wandbox#_dump_list_results_for_autocmd_workaround	wandbox.vim	/^function! wandbox#_dump_list_results_for_autocmd_workaround()$/;"	f
wandbox#_escape_backslash	wandbox.vim	/^function! wandbox#_escape_backslash(str)$/;"	f
wandbox#_export_vital_modules	wandbox.vim	/^function! wandbox#_export_vital_modules()$/;"	f
wandbox#_shinchoku_doudesuka	wandbox.vim	/^function! wandbox#_shinchoku_doudesuka(work)$/;"	f
wandbox#abort_async_works	wandbox.vim	/^function! wandbox#abort_async_works()$/;"	f
wandbox#compile	wandbox.vim	/^function! wandbox#compile(code, compiler, options, runtime_options, stdin)$/;"	f
wandbox#compile_async	wandbox.vim	/^function! wandbox#compile_async(code, compiler, options, runtime_options, stdin, work)$/;"	f
wandbox#complete_command	wandbox.vim	/^function! wandbox#complete_command(arglead, cmdline, cursorpos)$/;"	f
wandbox#is_available	wandbox.vim	/^function! wandbox#is_available(filetype)$/;"	f
wandbox#list	wandbox.vim	/^function! wandbox#list()$/;"	f
wandbox#open_browser	wandbox.vim	/^function! wandbox#open_browser()$/;"	f
wandbox#prettyprint#pp	wandbox/prettyprint.vim	/^function! wandbox#prettyprint#pp(...)$/;"	f
wandbox#prettyprint#pp	wandbox/prettyprint.vim	/^function! wandbox#prettyprint#pp(...)$/;"	f
wandbox#quickrun#add_type_with_hook	wandbox/quickrun.vim	/^function! wandbox#quickrun#add_type_with_hook(quickrun_config)$/;"	f
wandbox#quickrun#add_type_with_hook	wandbox/quickrun.vim	/^function! wandbox#quickrun#add_type_with_hook(quickrun_config)$/;"	f
wandbox#quickrun#add_type_with_runner	wandbox/quickrun.vim	/^function! wandbox#quickrun#add_type_with_runner(quickrun_config)$/;"	f
wandbox#quickrun#add_type_with_runner	wandbox/quickrun.vim	/^function! wandbox#quickrun#add_type_with_runner(quickrun_config)$/;"	f
wandbox#quickrun#add_wandbox_type	wandbox/quickrun.vim	/^function! wandbox#quickrun#add_wandbox_type(quickrun_config)$/;"	f
wandbox#quickrun#add_wandbox_type	wandbox/quickrun.vim	/^function! wandbox#quickrun#add_wandbox_type(quickrun_config)$/;"	f
wandbox#run	wandbox.vim	/^function! wandbox#run(range_given, ...)$/;"	f
wandbox#run_async	wandbox.vim	/^function! wandbox#run_async(range_given, ...)$/;"	f
wandbox#run_sync_or_async	wandbox.vim	/^function! wandbox#run_sync_or_async(...)$/;"	f
wandbox#show_option_list	wandbox.vim	/^function! wandbox#show_option_list()$/;"	f
wandbox#show_option_list_async	wandbox.vim	/^function! wandbox#show_option_list_async()$/;"	f
warn	vital/_quickrun/Vim/Message.vim	/^function! s:warn(msg) abort$/;"	f
wcswidth	vital/_quickrun/Data/String.vim	/^  function! s:wcswidth(str) abort$/;"	f
wcswidth	vital/_quickrun/Prelude.vim	/^  function! s:wcswidth(str) abort$/;"	f
wcswidth	vital/_wandbox_vim/Prelude.vim	/^  function! s:wcswidth(str)$/;"	f
which	vital/_quickrun/System/Filepath.vim	/^  function! s:which(command, ...) abort$/;"	f
which	vital/_quickrun/System/Filepath.vim	/^  function! s:which(str) abort$/;"	f
winnr	vital/_quickrun/Vim/ViewTracer.vim	/^function! s:winnr(handle) abort$/;"	f
winpath	vital/_quickrun/System/Filepath.vim	/^function! s:winpath(path) abort$/;"	f
with_index	vital/_quickrun/Data/List.vim	/^function! s:with_index(list, ...) abort$/;"	f
with_index	vital/_wandbox_vim/Data/List.vim	/^function! s:with_index(list, ...)$/;"	f
wrap	repeat.vim	/^function! s:wrap(command,count)$/;"	f
wrap	vital/_quickrun/Data/String.vim	/^function! s:wrap(str,...) abort$/;"	f
wrap	vital/_wandbox_vim/Data/String.vim	/^function! s:wrap(str,...)$/;"	f
zip	vital/_quickrun/Data/List.vim	/^function! s:zip(...) abort$/;"	f
zip	vital/_wandbox_vim/Data/List.vim	/^function! s:zip(...)$/;"	f
zip_fill	vital/_quickrun/Data/List.vim	/^function! s:zip_fill(xs, ys, filler) abort$/;"	f
zip_fill	vital/_wandbox_vim/Data/List.vim	/^function! s:zip_fill(xs, ys, filler)$/;"	f
